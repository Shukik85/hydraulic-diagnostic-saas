import ast
import os
import traceback
from pathlib import Path
from typing import List, Dict, Optional


class DjangoAwareDocstringGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–æ–≤ —Å —É—á–µ—Ç–æ–º Django-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∏"""
    
    def analyze_function(self, func_def: ast.FunctionDef, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Django"""
        try:
            info = {
                'name': func_def.name,
                'args': [],
                'returns': None,
                'description': self._infer_django_description(func_def, file_path),
                'raises': []
            }
            
            # –ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Django views
            if hasattr(func_def, 'args') and func_def.args:
                for arg in func_def.args.args:
                    if hasattr(arg, 'arg') and arg.arg != 'self' and arg.arg != 'cls':
                        arg_info = self._analyze_django_argument(arg, file_path)
                        info['args'].append(arg_info)
            
            # –î–ª—è Django –º–æ–¥–µ–ª–µ–π –∏ —Ñ–æ—Ä–º –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if 'model' in file_path or 'form' in file_path:
                info['returns'] = {
                    'type': 'None',
                    'description': 'None'
                }
            elif 'view' in file_path and func_def.name == 'get':
                info['returns'] = {
                    'type': 'HttpResponse',
                    'description': 'HTTP –æ—Ç–≤–µ—Ç'
                }
            
            return info
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {getattr(func_def, 'name', 'unknown')}: {e}")
            return {
                'name': getattr(func_def, 'name', 'unknown'),
                'args': [],
                'returns': None,
                'description': '–§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                'raises': []
            }
    
    def _infer_django_description(self, func_def: ast.FunctionDef, file_path: str) -> str: # noqa C901
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º Django –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        name = getattr(func_def, 'name', 'function')
        
        # Django models
        if 'model' in file_path.lower():
            if name == 'save':
                return "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            elif name == 'delete':
                return "–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            elif name == '__str__':
                return "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"
            elif name.startswith('get_'):
                return f"–ü–æ–ª—É—á–∞–µ—Ç {name[4:].replace('_', ' ')}"
            elif name.startswith('clean_'):
                return f"–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª–µ {name[6:].replace('_', ' ')}"
        
        # Django views
        elif 'view' in file_path.lower():
            if name == 'get':
                return "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å"
            elif name == 'post':
                return "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å"
            elif name == 'form_valid':
                return "–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º–µ"
            elif name == 'form_invalid':
                return "–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Ñ–æ—Ä–º–µ"
        
        # Django forms
        elif 'form' in file_path.lower():
            if name == 'clean':
                return "–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É"
            elif name.startswith('clean_'):
                return f"–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª–µ {name[6:].replace('_', ' ')}"
        
        # Django management commands
        elif 'management' in file_path.lower() and 'command' in file_path.lower():
            if name == 'handle':
                return "–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
        
        # –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        if name.startswith('get_'):
            return f"–ü–æ–ª—É—á–∞–µ—Ç {name[4:].replace('_', ' ')}"
        elif name.startswith('set_'):
            return f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {name[4:].replace('_', ' ')}"
        elif name.startswith('is_'):
            return f"–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ {name[3:].replace('_', ' ')}"
        elif name.startswith('create_'):
            return f"–°–æ–∑–¥–∞–µ—Ç {name[7:].replace('_', ' ')}"
        
        return f"–í—ã–ø–æ–ª–Ω—è–µ—Ç {name.replace('_', ' ')}"
    
    def _analyze_django_argument(self, arg: ast.arg, file_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º Django –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        arg_name = arg.arg
        
        # Django views –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if 'view' in file_path.lower():
            if arg_name == 'request':
                return {'name': arg_name, 'type': 'HttpRequest', 'description': 'HTTP –∑–∞–ø—Ä–æ—Å'}
            elif arg_name == 'pk':
                return {'name': arg_name, 'type': 'int', 'description': '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞'}
            elif arg_name == 'args':
                return {'name': arg_name, 'type': 'list', 'description': '–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã'}
            elif arg_name == 'kwargs':
                return {'name': arg_name, 'type': 'dict', 'description': '–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã'}
        
        # Django forms –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        elif 'form' in file_path.lower():
            if arg_name == 'data':
                return {'name': arg_name, 'type': 'dict', 'description': '–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã'}
            elif arg_name == 'files':
                return {'name': arg_name, 'type': 'dict', 'description': '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'}
        
        # –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        if arg_name.endswith('_id'):
            return {'name': arg_name, 'type': 'int', 'description': f'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä {arg_name[:-3]}'}
        elif arg_name.endswith('_list'):
            return {'name': arg_name, 'type': 'list', 'description': f'–°–ø–∏—Å–æ–∫ {arg_name[:-5]}'}
        
        return {'name': arg_name, 'type': 'Any', 'description': f'–ü–∞—Ä–∞–º–µ—Ç—Ä {arg_name}'}
    
    def generate_google_docstring(self, func_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ –≤ Google —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            lines = [f'"""{func_info["description"]}']
            lines.append('')
            
            if func_info['args']:
                lines.append('Args:')
                for arg in func_info['args']:
                    lines.append(f"    {arg['name']} ({arg['type']}): {arg['description']}")
                lines.append('')
            
            if func_info['returns']:
                lines.append('Returns:')
                lines.append(f"    {func_info['returns']['type']}: {func_info['returns']['description']}")
                lines.append('')
            
            if func_info['raises']:
                lines.append('Raises:')
                for exc in func_info['raises']:
                    lines.append(f"    {exc['type']}: {exc['description']}")
                lines.append('')
            
            lines.append('"""')
            return '\n'.join(lines)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞: {e}")
            return '"""–ë–∞–∑–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""'


def find_django_py_files(directory: str) -> List[Path]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ .py —Ñ–∞–π–ª—ã –≤ Django –ø—Ä–æ–µ–∫—Ç–µ, –∏—Å–∫–ª—é—á–∞—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–¥."""
    backend_path = Path(directory)
    if not backend_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return []
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    exclude_dirs = {'migrations', '__pycache__', 'tests', 'test', 'fixtures', 'static', 'media'}
    
    py_files = []
    for py_file in backend_path.rglob("*.py"):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if any(exclude_dir in py_file.parts for exclude_dir in exclude_dirs):
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
        if py_file.name in {'settings.py', 'wsgi.py', 'asgi.py', 'urls.py'}:
            continue
            
        py_files.append(py_file)
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(py_files)} .py —Ñ–∞–π–ª–æ–≤ –≤ {directory} (–∏—Å–∫–ª—é—á–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)")
    return py_files


def safe_parse_content(content: str, file_path: str) -> Optional[ast.AST]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return ast.parse(content)
    except SyntaxError as e:
        print(f"‚ö†Ô∏è  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None


def should_skip_function(func_name: str, file_path: str, node: ast.FunctionDef) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)"""
    skip_functions = {
        '__init__', '__new__', '__class__', '__doc__', '__module__', 
        '__weakref__', '__dict__', 'Meta', 'Objects'
    }
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if func_name in skip_functions:
        return True
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–∏–≥—Ä–∞—Ü–∏—è—Ö
    if 'migration' in file_path:
        return True
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Ç–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥)
    if len(node.body) == 1:
        first_stmt = node.body[0]
        if isinstance(first_stmt, ast.Expr) and isinstance(first_stmt.value, ast.Str):
            # –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return True
    
    return False


def ensure_function_has_body(lines: List[str], func_node: ast.FunctionDef, indent: int) -> List[str]:
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –ø–æ—Å–ª–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞"""
    def_line_idx = func_node.lineno - 1
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞ (–∏–ª–∏ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏)
    # –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    search_start = def_line_idx + 1
    has_body = False
    
    for i in range(search_start, min(search_start + 5, len(lines))):
        line = lines[i].rstrip()
        if line and not line.startswith(' ') and not line.startswith('\t'):
            # –ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ - –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
            break
        if line and (line.startswith(' ' * indent) or line.startswith('\t')):
            # –ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Å—Ç—É–ø–æ–º - –µ—Å—Ç—å —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
            has_body = True
            break
        if line and (line.lstrip().startswith('#') or line.lstrip().startswith('"""')):
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            continue
        if line and len(line.lstrip()) > 0:
            # –õ—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å—á–∏—Ç–∞–µ–º —Ç–µ–ª–æ–º
            has_body = True
            break
    
    if not has_body:
        # –î–æ–±–∞–≤–ª—è–µ–º pass –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        pass_line = ' ' * indent + 'pass'
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞
        insert_pos = def_line_idx + 1
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞
        while insert_pos < len(lines) and (lines[insert_pos].strip().startswith('"""')
                                           or not lines[insert_pos].strip()
                                           or lines[insert_pos].strip().startswith('#')):
            insert_pos += 1
        lines.insert(insert_pos, pass_line)
        print("    ‚ûï –î–æ–±–∞–≤–ª–µ–Ω 'pass' –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    return lines


def process_django_file(file_path: Path, generator: DjangoAwareDocstringGenerator) -> bool: # noqa C901
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Django —Ñ–∞–π–ª —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏"""
    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        tree = safe_parse_content(content, str(file_path))
        if tree is None:
            return False
        
        lines = content.split('\n')
        modified = False
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions = []
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                functions.append(node)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for node in reversed(functions):
            try:
                if should_skip_function(node.name, str(file_path), node):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞
                existing_docstring = ast.get_docstring(node)
                if existing_docstring is None:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥
                    func_info = generator.analyze_function(node, str(file_path))
                    docstring = generator.generate_google_docstring(func_info)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                    def_line_idx = node.lineno - 1
                    if def_line_idx < len(lines):
                        indent = len(lines[def_line_idx]) - len(lines[def_line_idx].lstrip())
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
                        docstring_lines = docstring.split('\n')
                        for i, line in enumerate(docstring_lines):
                            lines.insert(def_line_idx + 1 + i, ' ' * indent + line)
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å —Ç–µ–ª–æ
                        lines = ensure_function_has_body(lines, node, indent)
                        
                        modified = True
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ –¥–ª—è: {node.name}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {node.name}: {e}")
                print(traceback.format_exc())
        
        if modified:
            # –°–æ–∑–¥–∞–µ–º backup
            backup_path = file_path.with_suffix(file_path.suffix + '.backup')
            try:
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(content)
            except Exception:
                pass
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(lines))
                
                # –£–¥–∞–ª—è–µ–º backup –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                try:
                    if backup_path.exists():
                        backup_path.unlink()
                except Exception:
                    pass
                
                print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup
                try:
                    if backup_path.exists():
                        with open(backup_path, 'r', encoding='utf-8') as f:
                            backup_content = f.read()
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(backup_content)
                        backup_path.unlink()
                except Exception:
                    pass
                return False
        else:
            print(f"üì≠ –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        print(traceback.format_exc())
        return False


def validate_python_syntax(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        compile(content, str(file_path), 'exec')
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ {file_path}: {e}")
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ —Ñ–∞–π–ª—ã


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Django –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –î–û–ö–°–¢–†–ò–ù–ì–û–í –î–õ–Ø DJANGO –ü–†–û–ï–ö–¢–ê")
    print("üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /backend")
    print("‚ö° –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è Django-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ (–º–æ–¥–µ–ª–∏, views, —Ñ–æ—Ä–º—ã –∏ —Ç.–¥.)")
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    backend_dir = "backend"
    if not os.path.exists(backend_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {backend_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã (–∏—Å–∫–ª—é—á–∞—è –º–∏–≥—Ä–∞—Ü–∏–∏)
    py_files = find_django_py_files(backend_dir)
    if not py_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ .py —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if len(py_files) > 20:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(py_files)} —Ñ–∞–π–ª–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 20")
        py_files = py_files[:20]
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = DjangoAwareDocstringGenerator()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    successful = 0
    failed = 0
    syntax_errors = 0
    
    for file_path in py_files:
        if process_django_file(file_path, generator):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if validate_python_syntax(file_path):
                successful += 1
            else:
                syntax_errors += 1
                failed += 1
        else:
            failed += 1
    
    print("\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful} —Ñ–∞–π–ª–æ–≤")
    print(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {syntax_errors} —Ñ–∞–π–ª–æ–≤")
    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {failed - syntax_errors} —Ñ–∞–π–ª–æ–≤")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(py_files)}")
    
    if syntax_errors > 0:
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {syntax_errors} —Ñ–∞–π–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
    
    if successful > 0:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Django –ø—Ä–æ–µ–∫—Ç: python backend/manage.py check")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git status")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–∏–Ω—Ç–µ—Ä: python -m ruff check backend/")
        print("   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏")
        print("   5. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")


if __name__ == "__main__":
    main()
