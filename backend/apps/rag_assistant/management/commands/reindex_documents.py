from django.core.management.base import BaseCommand
from apps.rag_assistant.models import KnowledgeBase, DocumentChunk
from apps.rag_assistant.rag_service import DocumentProcessor
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--document-id',
            type=str,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏',
        )
        parser.add_argument(
            '--all',
            action='store_true',
            help='–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
        )
        parser.add_argument(
            '--category',
            type=str,
            choices=[choice for choice in KnowledgeBase.CATEGORY_CHOICES],
            help='–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        )
    
    def handle(self, *args, **options):
        processor = DocumentProcessor()
        
        if options['document_id']:
            self._reindex_document(processor, options['document_id'])
        elif options['all']:
            self._reindex_all_documents(processor)
        elif options['category']:
            self._reindex_category(processor, options['category'])
        else:
            self.stdout.write(
                self.style.ERROR('–£–∫–∞–∂–∏—Ç–µ --document-id, --all –∏–ª–∏ --category')
            )
    
    def _reindex_document(self, processor, document_id):
        """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            document = KnowledgeBase.objects.get(id=document_id)
            self.stdout.write(f'üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {document.title}')
            
            processor.reprocess_document(document)
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: {document.title}')
            )
        except KnowledgeBase.DoesNotExist:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}')
            )
    
    def _reindex_all_documents(self, processor):
        """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        documents = KnowledgeBase.objects.filter(status='active')
        total = documents.count()
        
        self.stdout.write(f'üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è {total} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...')
        
        success_count = 0
        error_count = 0
        
        for i, document in enumerate(documents, 1):
            try:
                self.stdout.write(f'[{i}/{total}] {document.title}')
                processor.reprocess_document(document)
                success_count += 1
                
            except Exception as e:
                error_count += 1
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {document.title} - {e}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–∫–∏: {error_count}'
            )
        )
    
    def _reindex_category(self, processor, category):
        """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        documents = KnowledgeBase.objects.filter(
            status='active', 
            category=category
        )
        total = documents.count()
        
        category_display = dict(KnowledgeBase.CATEGORY_CHOICES)[category]
        self.stdout.write(f'üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_display}" ({total} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)...')
        
        success_count = 0
        error_count = 0
        
        for i, document in enumerate(documents, 1):
            try:
                self.stdout.write(f'[{i}/{total}] {document.title}')
                processor.reprocess_document(document)
                success_count += 1
                
            except Exception as e:
                error_count += 1
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {document.title} - {e}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–∫–∏: {error_count}'
            )
        )
