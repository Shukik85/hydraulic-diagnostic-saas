"""Модуль проекта с автогенерированным докстрингом."""

# Generated by Django 5.2.7 on 2025-10-13 23:37

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RAGSystemSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        choices=[
                            ("sentence-transformers/all-MiniLM-L6-v2", "MiniLM-L6-v2"),
                            (
                                "sentence-transformers/all-mpnet-base-v2",
                                "MPNet-Base-v2",
                            ),
                            (
                                "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2",
                                "Multilingual-MiniLM-L12-v2",
                            ),
                        ],
                        default="sentence-transformers/all-MiniLM-L6-v2",
                        max_length=100,
                        verbose_name="Модель эмбеддингов",
                    ),
                ),
                (
                    "embedding_dimensions",
                    models.PositiveIntegerField(
                        default=384, verbose_name="Размерность векторов"
                    ),
                ),
                (
                    "search_top_k",
                    models.PositiveIntegerField(
                        default=5, verbose_name="Количество топ результатов"
                    ),
                ),
                (
                    "similarity_threshold",
                    models.FloatField(
                        default=0.1,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Порог схожести",
                    ),
                ),
                (
                    "chunk_size",
                    models.PositiveIntegerField(
                        default=512, verbose_name="Размер фрагмента"
                    ),
                ),
                (
                    "chunk_overlap",
                    models.PositiveIntegerField(
                        default=128, verbose_name="Перекрытие фрагментов"
                    ),
                ),
                (
                    "max_response_tokens",
                    models.PositiveIntegerField(
                        default=1000, verbose_name="Максимум токенов ответа"
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        default=0.7,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                        verbose_name="Температура генерации",
                    ),
                ),
                (
                    "enable_caching",
                    models.BooleanField(
                        default=True, verbose_name="Включить кэширование"
                    ),
                ),
                (
                    "cache_ttl_hours",
                    models.PositiveIntegerField(
                        default=24, verbose_name="TTL кэша (часы)"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, verbose_name="Активные настройки"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Настройки RAG системы",
                "verbose_name_plural": "Настройки RAG системы",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="KnowledgeBase",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=500, verbose_name="Название документа"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("gost", "ГОСТ"),
                            ("manual", "Руководство"),
                            ("specification", "Спецификация"),
                            ("procedure", "Процедура"),
                            ("troubleshooting", "Устранение неисправностей"),
                            ("maintenance", "Техническое обслуживание"),
                            ("safety", "Безопасность"),
                            ("regulation", "Нормативы"),
                        ],
                        max_length=50,
                        verbose_name="Категория",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="Описание")),
                ("content", models.TextField(verbose_name="Содержимое документа")),
                (
                    "summary",
                    models.TextField(blank=True, verbose_name="Краткое содержание"),
                ),
                (
                    "keywords",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Ключевые слова"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Тип документа"
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Номер документа"
                    ),
                ),
                (
                    "version",
                    models.CharField(blank=True, max_length=50, verbose_name="Версия"),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата публикации"
                    ),
                ),
                (
                    "embedding_vector",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Векторное представление"
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Модель эмбеддингов"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Активен"),
                            ("inactive", "Неактивен"),
                            ("processing", "Обработка"),
                            ("error", "Ошибка"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "processing_notes",
                    models.TextField(blank=True, verbose_name="Заметки обработки"),
                ),
                (
                    "search_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Количество поисков"
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Оценка релевантности",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлен"),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Загружен пользователем",
                    ),
                ),
            ],
            options={
                "verbose_name": "Документ базы знаний",
                "verbose_name_plural": "База знаний",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DocumentChunk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField(verbose_name="Содержимое фрагмента")),
                (
                    "chunk_index",
                    models.PositiveIntegerField(verbose_name="Индекс фрагмента"),
                ),
                (
                    "start_position",
                    models.PositiveIntegerField(verbose_name="Начальная позиция"),
                ),
                (
                    "end_position",
                    models.PositiveIntegerField(verbose_name="Конечная позиция"),
                ),
                (
                    "embedding_vector",
                    models.JSONField(
                        default=list, verbose_name="Векторное представление"
                    ),
                ),
                (
                    "word_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Количество слов"
                    ),
                ),
                (
                    "char_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Количество символов"
                    ),
                ),
                (
                    "section_title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Название раздела"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="rag_assistant.knowledgebase",
                        verbose_name="Документ",
                    ),
                ),
            ],
            options={
                "verbose_name": "Фрагмент документа",
                "verbose_name_plural": "Фрагменты документов",
                "ordering": ["document", "chunk_index"],
            },
        ),
        migrations.CreateModel(
            name="QuerySource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Оценка релевантности",
                    ),
                ),
                (
                    "chunk_used",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rag_assistant.documentchunk",
                        verbose_name="Использованный фрагмент",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rag_assistant.knowledgebase",
                    ),
                ),
            ],
            options={
                "verbose_name": "Источник запроса",
                "verbose_name_plural": "Источники запросов",
            },
        ),
        migrations.CreateModel(
            name="RAGConversation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Название беседы"),
                ),
                (
                    "context_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Контекст беседы"
                    ),
                ),
                (
                    "system_prompt",
                    models.TextField(blank=True, verbose_name="Системный промпт"),
                ),
                (
                    "message_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Количество сообщений"
                    ),
                ),
                (
                    "total_tokens",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Общее количество токенов"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активна"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Последняя активность"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создана"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "RAG беседа",
                "verbose_name_plural": "RAG беседы",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="ConversationMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("user", "Пользователь"),
                            ("assistant", "Ассистент"),
                            ("system", "Система"),
                        ],
                        max_length=20,
                        verbose_name="Тип сообщения",
                    ),
                ),
                ("content", models.TextField(verbose_name="Содержимое")),
                (
                    "token_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Количество токенов"
                    ),
                ),
                (
                    "response_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Время ответа"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создано"),
                ),
                (
                    "source_documents",
                    models.ManyToManyField(
                        blank=True,
                        to="rag_assistant.knowledgebase",
                        verbose_name="Документы-источники",
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="rag_assistant.ragconversation",
                        verbose_name="Беседа",
                    ),
                ),
            ],
            options={
                "verbose_name": "Сообщение беседы",
                "verbose_name_plural": "Сообщения бесед",
                "ordering": ["conversation", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="RAGQuery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("query_text", models.TextField(verbose_name="Текст запроса")),
                (
                    "query_type",
                    models.CharField(
                        choices=[
                            ("search", "Поиск"),
                            ("question", "Вопрос"),
                            ("analysis", "Анализ"),
                            ("recommendation", "Рекомендация"),
                        ],
                        default="question",
                        max_length=50,
                        verbose_name="Тип запроса",
                    ),
                ),
                (
                    "response_text",
                    models.TextField(blank=True, verbose_name="Текст ответа"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Уверенность ответа",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидание"),
                            ("processing", "Обработка"),
                            ("completed", "Завершен"),
                            ("failed", "Ошибка"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "processing_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Время обработки"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Сообщение об ошибке"),
                ),
                (
                    "user_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Оценка пользователя (1-5)",
                    ),
                ),
                (
                    "user_feedback",
                    models.TextField(blank=True, verbose_name="Отзыв пользователя"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлен"),
                ),
                (
                    "source_documents",
                    models.ManyToManyField(
                        through="rag_assistant.QuerySource",
                        to="rag_assistant.knowledgebase",
                        verbose_name="Документы-источники",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "RAG запрос",
                "verbose_name_plural": "RAG запросы",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="querysource",
            name="query",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="rag_assistant.ragquery"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgebase",
            index=models.Index(
                fields=["category", "status"], name="rag_assista_categor_495ea5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgebase",
            index=models.Index(
                fields=["status", "-created_at"], name="rag_assista_status_691ab4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgebase",
            index=models.Index(
                fields=["document_number"], name="rag_assista_documen_5880bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentchunk",
            index=models.Index(
                fields=["document", "chunk_index"],
                name="rag_assista_documen_3c8eaf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="ragconversation",
            index=models.Index(
                fields=["user", "-last_activity"], name="rag_assista_user_id_b64747_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ragconversation",
            index=models.Index(
                fields=["is_active", "-last_activity"],
                name="rag_assista_is_acti_d12ca2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conversationmessage",
            index=models.Index(
                fields=["conversation", "created_at"],
                name="rag_assista_convers_575a45_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conversationmessage",
            index=models.Index(
                fields=["message_type", "created_at"],
                name="rag_assista_message_30b466_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="ragquery",
            index=models.Index(
                fields=["user", "-created_at"], name="rag_assista_user_id_ec5062_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ragquery",
            index=models.Index(
                fields=["status", "-created_at"], name="rag_assista_status_e26bcb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ragquery",
            index=models.Index(
                fields=["query_type", "-created_at"],
                name="rag_assista_query_t_3436f8_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="querysource",
            unique_together={("query", "document")},
        ),
    ]
