import logging
from datetime import datetime, timedelta

from django.db.models.signals import post_save, pre_delete
from django.dispatch import receiver

from .models import DiagnosticReport, HydraulicSystem, SensorData

logger = logging.getLogger(__name__)


@receiver(post_save, sender=SensorData)
def process_critical_sensor_data(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤"""
    if created and instance.is_critical:
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            logger.warning(
                f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ: {instance.system.name} - "
                f"{instance.sensor_type}: {instance.value} {instance.unit}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            recent_critical = SensorData.objects.filter(
                system=instance.system,
                is_critical=True,
                timestamp__gte=datetime.now() - timedelta(hours=1),
            ).count()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
            if recent_critical >= 5:  # 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ —á–∞—Å
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                recent_reports = DiagnosticReport.objects.filter(
                    system=instance.system,
                    created_at__gte=datetime.now() - timedelta(hours=1),
                    title__icontains="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
                ).count()

                if recent_reports == 0:
                    DiagnosticReport.objects.create(
                        system=instance.system,
                        title=(
                            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç - "
                            "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"
                        ),
                        description=(
                            f"–°–∏—Å—Ç–µ–º–∞ {instance.system.name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞ "(
                                f"{recent_critical} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"
                                " –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å. "
                                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
                            )
                        ),
                        severity="critical",
                    )

                    logger.error(
                        f"üö® –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è "
                        f"{instance.system.name}"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")


@receiver(post_save, sender=HydraulicSystem)
def initialize_system(sender, instance, created, **kwargs):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    if created:
        try:
            logger.info(
                f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {instance.name} "
                f"(–≤–ª–∞–¥–µ–ª–µ—Ü: {instance.owner.username})"
            )

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
            # - –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            # - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã {instance.name}: {e}")


@receiver(pre_delete, sender=HydraulicSystem)
def cleanup_system_data(sender, instance, **kwargs):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–¥—Å—á–µ—Ç —É–¥–∞–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sensor_count = instance.sensor_data.count()
        reports_count = instance.diagnostic_reports.count()

        logger.info(
            f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã {instance.name}: "
            f"{sensor_count} –∑–∞–ø–∏—Å–µ–π –¥–∞—Ç—á–∏–∫–æ–≤, {reports_count} –æ—Ç—á–µ—Ç–æ–≤"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã {instance.name}: {e}")


@receiver(post_save, sender=DiagnosticReport)
def process_diagnostic_report(sender, instance, created, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    if created:
        try:
            logger.info(
                f"üìã –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: {instance.title} "(
                    f"(—Å–∏—Å—Ç–µ–º–∞: {instance.system.name}, "
                    f"—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {instance.severity})"
                )
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
            if instance.severity == "critical":
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
                # - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                # - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                # - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
                pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ {instance.title}: {e}")
