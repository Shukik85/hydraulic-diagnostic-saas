# Generated by Django 5.2.7 on 2025-10-13 23:34

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SensorType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Название"
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=50, unique=True, verbose_name="Код"),
                ),
                (
                    "unit",
                    models.CharField(max_length=20, verbose_name="Единица измерения"),
                ),
                ("description", models.TextField(blank=True, verbose_name="Описание")),
                (
                    "normal_min",
                    models.FloatField(blank=True, null=True, verbose_name="Мин. норма"),
                ),
                (
                    "normal_max",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Макс. норма"
                    ),
                ),
                (
                    "warning_min",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Мин. предупреждение"
                    ),
                ),
                (
                    "warning_max",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Макс. предупреждение"
                    ),
                ),
                (
                    "critical_min",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Мин. критичное"
                    ),
                ),
                (
                    "critical_max",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Макс. критичное"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активен"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Тип датчика",
                "verbose_name_plural": "Типы датчиков",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HydraulicSystem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, verbose_name="Название системы"),
                ),
                ("description", models.TextField(blank=True, verbose_name="Описание")),
                (
                    "system_type",
                    models.CharField(
                        choices=[
                            ("industrial", "Промышленная"),
                            ("mobile", "Мобильная"),
                            ("marine", "Морская"),
                            ("aviation", "Авиационная"),
                            ("construction", "Строительная"),
                            ("mining", "Горнодобывающая"),
                            ("agricultural", "Сельскохозяйственная"),
                        ],
                        max_length=50,
                        verbose_name="Тип системы",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Производитель"
                    ),
                ),
                (
                    "model",
                    models.CharField(blank=True, max_length=100, verbose_name="Модель"),
                ),
                (
                    "serial_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Серийный номер"
                    ),
                ),
                (
                    "max_pressure",
                    models.FloatField(
                        help_text="Максимальное давление (бар)",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Макс. давление",
                    ),
                ),
                (
                    "max_flow",
                    models.FloatField(
                        help_text="Максимальный расход (л/мин)",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Макс. расход",
                    ),
                ),
                (
                    "operating_temperature_min",
                    models.FloatField(
                        default=-20,
                        help_text="Мин. рабочая температура (°C)",
                        verbose_name="Мин. температура",
                    ),
                ),
                (
                    "operating_temperature_max",
                    models.FloatField(
                        default=80,
                        help_text="Макс. рабочая температура (°C)",
                        verbose_name="Макс. температура",
                    ),
                ),
                (
                    "fluid_type",
                    models.CharField(
                        default="Hydraulic Oil ISO 46",
                        max_length=100,
                        verbose_name="Тип жидкости",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Активна"),
                            ("maintenance", "На обслуживании"),
                            ("inactive", "Неактивна"),
                            ("emergency", "Аварийная"),
                            ("decommissioned", "Списана"),
                        ],
                        default="active",
                        max_length=50,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "criticality",
                    models.CharField(
                        choices=[
                            ("low", "Низкая"),
                            ("medium", "Средняя"),
                            ("high", "Высокая"),
                            ("critical", "Критическая"),
                        ],
                        default="medium",
                        max_length=50,
                        verbose_name="Критичность",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Местоположение"
                    ),
                ),
                (
                    "installation_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата установки"
                    ),
                ),
                (
                    "last_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Последнее ТО"
                    ),
                ),
                (
                    "next_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Следующее ТО"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создано"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлено"),
                ),
                (
                    "custom_parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        verbose_name="Дополнительные параметры",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Владелец",
                    ),
                ),
            ],
            options={
                "verbose_name": "Гидравлическая система",
                "verbose_name_plural": "Гидравлические системы",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DiagnosticReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Заголовок")),
                ("description", models.TextField(verbose_name="Описание")),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("automated", "Автоматический"),
                            ("manual", "Ручной"),
                            ("scheduled", "Плановый"),
                            ("emergency", "Экстренный"),
                        ],
                        default="automated",
                        max_length=50,
                        verbose_name="Тип отчета",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Информация"),
                            ("warning", "Предупреждение"),
                            ("error", "Ошибка"),
                            ("critical", "Критично"),
                        ],
                        default="info",
                        max_length=20,
                        verbose_name="Уровень серьезности",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидание"),
                            ("processing", "Обработка"),
                            ("completed", "Завершен"),
                            ("failed", "Ошибка"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                ("findings", models.JSONField(default=list, verbose_name="Результаты")),
                (
                    "recommendations",
                    models.JSONField(default=list, verbose_name="Рекомендации"),
                ),
                (
                    "analysis_data",
                    models.JSONField(default=dict, verbose_name="Данные анализа"),
                ),
                (
                    "ai_confidence",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Уверенность AI",
                    ),
                ),
                ("ai_analysis", models.TextField(blank=True, verbose_name="AI анализ")),
                (
                    "attachments",
                    models.JSONField(default=list, verbose_name="Вложения"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Завершен"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлено"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создан пользователем",
                    ),
                ),
                (
                    "system",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.hydraulicsystem",
                        verbose_name="Система",
                    ),
                ),
            ],
            options={
                "verbose_name": "Отчет диагностики",
                "verbose_name_plural": "Отчеты диагностики",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Название работ"),
                ),
                ("description", models.TextField(verbose_name="Описание")),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("preventive", "Профилактическое"),
                            ("corrective", "Корректирующее"),
                            ("emergency", "Экстренное"),
                            ("scheduled", "Плановое"),
                            ("condition_based", "По состоянию"),
                        ],
                        max_length=50,
                        verbose_name="Тип обслуживания",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Запланировано"),
                            ("in_progress", "В процессе"),
                            ("completed", "Завершено"),
                            ("cancelled", "Отменено"),
                            ("overdue", "Просрочено"),
                        ],
                        default="planned",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateTimeField(verbose_name="Запланированная дата"),
                ),
                (
                    "started_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Начато"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Завершено"
                    ),
                ),
                (
                    "estimated_duration",
                    models.DurationField(
                        blank=True,
                        null=True,
                        verbose_name="Ожидаемая продолжительность",
                    ),
                ),
                (
                    "work_performed",
                    models.TextField(blank=True, verbose_name="Выполненные работы"),
                ),
                (
                    "parts_replaced",
                    models.JSONField(default=list, verbose_name="Замененные детали"),
                ),
                (
                    "materials_used",
                    models.JSONField(
                        default=list, verbose_name="Использованные материалы"
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Ожидаемая стоимость",
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Фактическая стоимость",
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Успешно выполнено"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Заметки")),
                (
                    "attachments",
                    models.JSONField(default=list, verbose_name="Вложения"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_maintenance",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Назначено",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="completed_maintenance",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Выполнено",
                    ),
                ),
                (
                    "system",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.hydraulicsystem",
                        verbose_name="Система",
                    ),
                ),
            ],
            options={
                "verbose_name": "Запись ТО",
                "verbose_name_plural": "Записи ТО",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="SensorData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "sensor_type",
                    models.CharField(
                        choices=[
                            ("pressure", "Давление"),
                            ("temperature", "Температура"),
                            ("flow", "Расход"),
                            ("vibration", "Вибрация"),
                            ("contamination", "Загрязнение"),
                            ("noise", "Шум"),
                            ("power", "Мощность"),
                        ],
                        max_length=50,
                        verbose_name="Тип датчика",
                    ),
                ),
                (
                    "sensor_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="ID датчика"
                    ),
                ),
                ("value", models.FloatField(verbose_name="Значение")),
                (
                    "unit",
                    models.CharField(max_length=20, verbose_name="Единица измерения"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Время измерения",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("normal", "Норма"),
                            ("warning", "Предупреждение"),
                            ("critical", "Критично"),
                            ("fault", "Неисправность"),
                        ],
                        default="normal",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "is_critical",
                    models.BooleanField(default=False, verbose_name="Критично"),
                ),
                (
                    "warning_message",
                    models.TextField(
                        blank=True, verbose_name="Сообщение предупреждения"
                    ),
                ),
                (
                    "raw_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Сырые данные"
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Качество данных",
                    ),
                ),
                (
                    "deviation_from_normal",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Отклонение от нормы"
                    ),
                ),
                (
                    "trend_direction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("up", "Растет"),
                            ("down", "Падает"),
                            ("stable", "Стабильно"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Направление тренда",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "system",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.hydraulicsystem",
                        verbose_name="Система",
                    ),
                ),
            ],
            options={
                "verbose_name": "Данные датчика",
                "verbose_name_plural": "Данные датчиков",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("sensor_critical", "Критические показания датчика"),
                            ("maintenance_due", "Требуется ТО"),
                            ("maintenance_overdue", "Просрочено ТО"),
                            ("system_failure", "Отказ системы"),
                            ("anomaly_detected", "Обнаружена аномалия"),
                            ("communication_lost", "Потеря связи"),
                            ("data_quality", "Проблемы с качеством данных"),
                            ("performance_degradation", "Снижение производительности"),
                        ],
                        max_length=50,
                        verbose_name="Тип оповещения",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Низкая"),
                            ("medium", "Средняя"),
                            ("high", "Высокая"),
                            ("critical", "Критическая"),
                        ],
                        max_length=20,
                        verbose_name="Уровень серьезности",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Активно"),
                            ("acknowledged", "Принято"),
                            ("resolved", "Решено"),
                            ("dismissed", "Отклонено"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Заголовок")),
                ("message", models.TextField(verbose_name="Сообщение")),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Дополнительные данные"
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Время принятия"
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Время решения"
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(blank=True, verbose_name="Заметки по решению"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создано"),
                ),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Принято пользователем",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Решено пользователем",
                    ),
                ),
                (
                    "system",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.hydraulicsystem",
                        verbose_name="Система",
                    ),
                ),
                (
                    "related_sensor_data",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.sensordata",
                        verbose_name="Связанные данные датчика",
                    ),
                ),
            ],
            options={
                "verbose_name": "Оповещение",
                "verbose_name_plural": "Оповещения",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SystemComponent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Название")),
                (
                    "component_type",
                    models.CharField(
                        choices=[
                            ("pump", "Насос"),
                            ("motor", "Гидромотор"),
                            ("cylinder", "Цилиндр"),
                            ("valve", "Клапан"),
                            ("filter", "Фильтр"),
                            ("accumulator", "Аккумулятор"),
                            ("cooler", "Охладитель"),
                            ("tank", "Бак"),
                            ("hose", "Шланг"),
                            ("fitting", "Фитинг"),
                        ],
                        max_length=50,
                        verbose_name="Тип компонента",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Производитель"
                    ),
                ),
                (
                    "model",
                    models.CharField(blank=True, max_length=100, verbose_name="Модель"),
                ),
                (
                    "serial_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Серийный номер"
                    ),
                ),
                (
                    "part_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Номер детали"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("operational", "Исправен"),
                            ("warning", "Требует внимания"),
                            ("maintenance", "Требует ТО"),
                            ("failed", "Неисправен"),
                            ("replaced", "Заменен"),
                        ],
                        default="operational",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "condition_score",
                    models.FloatField(
                        default=100.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Оценка состояния (%)",
                    ),
                ),
                (
                    "installation_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата установки"
                    ),
                ),
                (
                    "last_inspection",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Последняя проверка"
                    ),
                ),
                (
                    "next_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Следующее ТО"
                    ),
                ),
                (
                    "specifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        verbose_name="Технические характеристики",
                    ),
                ),
                (
                    "maintenance_history",
                    models.JSONField(
                        blank=True, default=list, verbose_name="История обслуживания"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="diagnostics.hydraulicsystem",
                        verbose_name="Система",
                    ),
                ),
            ],
            options={
                "verbose_name": "Компонент системы",
                "verbose_name_plural": "Компоненты системы",
                "ordering": ["system", "component_type", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="hydraulicsystem",
            index=models.Index(
                fields=["owner", "status"], name="diagnostics_owner_i_e6d6bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hydraulicsystem",
            index=models.Index(
                fields=["system_type", "status"], name="diagnostics_system__cd7e68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hydraulicsystem",
            index=models.Index(
                fields=["-created_at"], name="diagnostics_created_391a1d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="diagnosticreport",
            index=models.Index(
                fields=["system", "-created_at"], name="diagnostics_system__a7e3d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="diagnosticreport",
            index=models.Index(
                fields=["severity", "-created_at"],
                name="diagnostics_severit_08f7cf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="diagnosticreport",
            index=models.Index(
                fields=["status", "-created_at"], name="diagnostics_status_3ea54b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["system", "status"], name="diagnostics_system__fbe79b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["scheduled_date"], name="diagnostics_schedul_aa537b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["assigned_to", "status"], name="diagnostics_assigne_9edd37_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sensordata",
            index=models.Index(
                fields=["system", "sensor_type", "-timestamp"],
                name="diagnostics_system__d65227_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sensordata",
            index=models.Index(
                fields=["system", "-timestamp"], name="diagnostics_system__602556_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sensordata",
            index=models.Index(
                fields=["is_critical", "-timestamp"],
                name="diagnostics_is_crit_d3b99a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sensordata",
            index=models.Index(
                fields=["-timestamp"], name="diagnostics_timesta_8cc67a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["system", "status", "-created_at"],
                name="diagnostics_system__7292de_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["severity", "status", "-created_at"],
                name="diagnostics_severit_560286_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["alert_type", "-created_at"],
                name="diagnostics_alert_t_ba1ce0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="systemcomponent",
            index=models.Index(
                fields=["system", "component_type"],
                name="diagnostics_system__6202d6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="systemcomponent",
            index=models.Index(
                fields=["system", "status"], name="diagnostics_system__0f5ff3_idx"
            ),
        ),
    ]
