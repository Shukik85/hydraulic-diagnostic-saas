import json
import logging
import random
from datetime import datetime, timedelta

from django.contrib.auth import get_user_model
from django.core.management.base import BaseCommand

from apps.diagnostics.models import DiagnosticReport, HydraulicSystem, SensorData

User = get_user_model()
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º"

    def add_arguments(self, parser):
        parser.add_argument(
            "--systems", type=int, default=5, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
        )
        parser.add_argument(
            "--sensors", type=int, default=100, help="–ó–∞–ø–∏—Å–µ–π –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ —Å–∏—Å—Ç–µ–º—É"
        )
        parser.add_argument("--days", type=int, default=7, help="–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–Ω—è—Ö")
        parser.add_argument(
            "--user-id",
            type=int,
            default=None,
            help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)",
        )

    def handle(self, *args, **options):  # noqa: C901
        systems_count = options["systems"]
        sensors_count = options["sensors"]
        days_back = options["days"]
        user_id = options["user_id"]
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id:
                user = User.objects.get(id=user_id)
            else:
                user = User.objects.first()

            if not user:
                self.stdout.write(
                    self.style.ERROR(
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞."
                    )
                )
                return
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_reports = DiagnosticReport.objects.filter(system__owner=user).count()
            self.stdout.write(
                self.style.SUCCESS(
                    "\n‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
                    f"üè≠ –°–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º: {systems_count}\n"
                    f"üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–∞—Ç—á–∏–∫–æ–≤: {total_sensors_created}\n"
                    f"üìã –°–æ–∑–¥–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}\n"
                    f"‚è± –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {days_back} –¥–Ω–µ–π\n"
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"))
