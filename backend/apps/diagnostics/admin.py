import json
from datetime import datetime, timedelta

from django.contrib import admin
from django.utils.html import format_html
from django.utils.safestring import mark_safe

from .models import DiagnosticReport, HydraulicSystem, SensorData


@admin.register(HydraulicSystem)
class HydraulicSystemAdmin(admin.ModelAdmin):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º"""

    list_display = [
        "name",
        "system_type",
        "status",
        "owner",
        "location",
        "max_pressure",
        "max_flow",
        "health_indicator",
        "last_sensor_data",
        "created_at",
    ]

    list_filter = [
        "system_type",
        "status",
        "created_at",
        "owner",
        ("installation_date", admin.DateFieldListFilter),
    ]

    search_fields = ["name", "location", "owner__username", "owner__email"]

    readonly_fields = [
        "created_at",
        "updated_at",
        "health_indicator",
        "system_statistics",
    ]

    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {"fields": ("name", "system_type", "location", "status", "owner")},
        ),
        (
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            {
                "fields": (
                    "max_pressure",
                    "max_flow",
                    "temperature_range",
                    "installation_date",
                )
            },
        ),
        (
            "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {
                "fields": (
                    "created_at",
                    "updated_at",
                    "health_indicator",
                    "system_statistics",
                ),
                "classes": ("collapse",),
            },
        ),
    )

    actions = ["run_diagnostics", "generate_health_report", "export_system_data"]

    @admin.display(description="–°–æ—Å—Ç–æ—è–Ω–∏–µ")
    def health_indicator(self, obj):
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            day_ago = datetime.now() - timedelta(days=1)
            recent_data = obj.sensor_data.filter(timestamp__gte=day_ago)

            if not recent_data.exists():
                return format_html('<span style="color: gray;">‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>')

            critical_count = recent_data.filter(is_critical=True).count()
            total_count = recent_data.count()

            if total_count == 0:
                return format_html('<span style="color: gray;">‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>')

            critical_ratio = critical_count / total_count

            if critical_ratio == 0:
                return format_html('<span style="color: green;">üü¢ –û—Ç–ª–∏—á–Ω–æ</span>')
            elif critical_ratio < 0.1:
                return format_html('<span style="color: lightgreen;">üîµ –•–æ—Ä–æ—à–æ</span>')
            elif critical_ratio < 0.3:
                return format_html('<span style="color: orange;">üü† –í–Ω–∏–º–∞–Ω–∏–µ</span>')
            else:
                return format_html('<span style="color: red;">üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ</span>')

        except Exception:
            return format_html('<span style="color: gray;">‚ö™ –û—à–∏–±–∫–∞</span>')

    @admin.display(description="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ")
    def last_sensor_data(self, obj):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∞"""
        latest = obj.sensor_data.order_by("-timestamp").first()
        if latest:
            color = "red" if latest.is_critical else "green"
            return format_html(
                '<span style="color: {};">{}: {} {}</span><br/><small>{}</small>',
                color,
                latest.get_sensor_type_display(),
                latest.value,
                latest.unit,
                latest.timestamp.strftime("%d.%m %H:%M"),
            )
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    @admin.display(description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def system_statistics(self, obj):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            week_ago = datetime.now() - timedelta(days=7)

            sensor_count = obj.sensor_data.filter(timestamp__gte=week_ago).count()
            critical_count = obj.sensor_data.filter(
                timestamp__gte=week_ago, is_critical=True
            ).count()
            reports_count = obj.diagnostic_reports.filter(created_at__gte=week_ago).count()

            stats_html = f"""
            <div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">
                <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</h4>
                <p><strong>–ó–∞–ø–∏—Å–∏ –¥–∞—Ç—á–∏–∫–æ–≤:</strong> {sensor_count}</p>
                <p><strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:</strong> {critical_count}</p>
                <p><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:</strong> {reports_count}</p>
                <p><strong>–°—Ä–µ–¥–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å:</strong> {round(critical_count/7, 1)}</p>
            </div>
            """

            return mark_safe(stats_html)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

    @admin.action(description="üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
    def run_diagnostics(self, request, queryset):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        count = 0
        for system in queryset:
            try:
                DiagnosticReport.objects.create(
                    system=system,
                    title=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                    severity="info",
                )
                count += 1
            except Exception as e:
                self.message_user(request, f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ {system.name}: {e}", level="ERROR")

        self.message_user(request, f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {count} —Å–∏—Å—Ç–µ–º")

    @admin.action(description="üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
    def generate_health_report(self, request, queryset):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º"""
        total_systems = queryset.count()
        healthy_systems = 0

        for system in queryset:
            day_ago = datetime.now() - timedelta(days=1)
            critical_events = system.sensor_data.filter(
                timestamp__gte=day_ago, is_critical=True
            ).count()

            if critical_events == 0:
                healthy_systems += 1

        self.message_user(
            request,
            f"–û—Ç—á–µ—Ç: {healthy_systems}/{total_systems} —Å–∏—Å—Ç–µ–º –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
        )

    @admin.action(description="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    def export_system_data(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        self.message_user(request, f"–≠–∫—Å–ø–æ—Ä—Ç {queryset.count()} —Å–∏—Å—Ç–µ–º (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")


@admin.register(SensorData)
class SensorDataAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤"""

    list_display = [
        "system",
        "sensor_type",
        "value_with_unit",
        "timestamp",
        "critical_indicator",
        "system_owner",
    ]

    list_filter = [
        "sensor_type",
        "is_critical",
        "system__system_type",
        ("timestamp", admin.DateFieldListFilter),
        "system__owner",
    ]

    search_fields = [
        "system__name",
        "system__owner__username",
        "warning_message",
        "sensor_type",
    ]

    readonly_fields = ["created_at"]
    date_hierarchy = "timestamp"
    list_per_page = 50

    @admin.display(description="–ó–Ω–∞—á–µ–Ω–∏–µ", ordering="value")
    def value_with_unit(self, obj):
        """–ó–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        return f"{obj.value} {obj.unit}"

    @admin.display(description="–°—Ç–∞—Ç—É—Å", ordering="is_critical")
    def critical_indicator(self, obj):
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        if obj.is_critical:
            return format_html('<span style="color: red; font-weight: bold;">üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ</span>')
        return format_html('<span style="color: green;">üü¢ –ù–æ—Ä–º–∞</span>')

    @admin.display(description="–í–ª–∞–¥–µ–ª–µ—Ü", ordering="system__owner__username")
    def system_owner(self, obj):
        """–í–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã"""
        return obj.system.owner.username

    actions = ["mark_as_critical", "mark_as_normal", "export_sensor_data"]

    @admin.action(description="‚ö†Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ")
    def mark_as_critical(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ"""
        updated = queryset.update(
            is_critical=True, warning_message="–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        self.message_user(request, f"{updated} –∑–∞–ø–∏—Å–µ–π –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ")

    @admin.action(description="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ")
    def mark_as_normal(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ"""
        updated = queryset.update(is_critical=False, warning_message="")
        self.message_user(request, f"{updated} –∑–∞–ø–∏—Å–µ–π –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ")


@admin.register(DiagnosticReport)
class DiagnosticReportAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""

    list_display = [
        "title",
        "system",
        "severity_indicator",
        "system_owner",
        "has_ai_analysis",
        "created_at",
    ]

    list_filter = [
        "severity",
        "system__system_type",
        "system__owner",
        ("created_at", admin.DateFieldListFilter),
    ]

    search_fields = ["title", "description", "system__name", "system__owner__username"]

    readonly_fields = ["created_at", "updated_at", "ai_analysis_preview"]

    fieldsets = (
        (
            "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {"fields": ("system", "title", "description", "severity")},
        ),
        (
            "AI –ê–Ω–∞–ª–∏–∑",
            {
                "fields": ("ai_analysis_preview", "ai_analysis"),
                "classes": ("collapse",),
            },
        ),
        (
            "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            {"fields": ("created_at", "updated_at"), "classes": ("collapse",)},
        ),
    )

    date_hierarchy = "created_at"

    @admin.display(description="–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å", ordering="severity")
    def severity_indicator(self, obj):
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""
        colors = {
            "info": "blue",
            "warning": "orange",
            "error": "red",
            "critical": "darkred",
        }
        icons = {"info": "‚ÑπÔ∏è", "warning": "‚ö†Ô∏è", "error": "‚ùå", "critical": "üö®"}

        color = colors.get(obj.severity, "gray")
        icon = icons.get(obj.severity, "‚ùì")

        return format_html(
            '<span style="color: {}; font-weight: bold;">{} {}</span>',
            color,
            icon,
            obj.get_severity_display(),
        )

    @admin.display(description="–í–ª–∞–¥–µ–ª–µ—Ü", ordering="system__owner__username")
    def system_owner(self, obj):
        """–í–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã"""
        return obj.system.owner.username

    @admin.display(description="AI –∞–Ω–∞–ª–∏–∑")
    def has_ai_analysis(self, obj):
        """–ù–∞–ª–∏—á–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞"""
        if obj.ai_analysis:
            return format_html('<span style="color: green;">ü§ñ –î–∞</span>')
        return format_html('<span style="color: gray;">‚ùå –ù–µ—Ç</span>')

    @admin.display(description="–ü—Ä–µ–≤—å—é AI –∞–Ω–∞–ª–∏–∑–∞")
    def ai_analysis_preview(self, obj):
        """–ü—Ä–µ–≤—å—é AI –∞–Ω–∞–ª–∏–∑–∞"""
        if not obj.ai_analysis:
            return "AI –∞–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        try:
            analysis = json.loads(obj.ai_analysis) if isinstance(obj.ai_analysis, str) else obj.ai_analysis

            preview_html = "<div style='background: #f8f9fa; padding: 10px; border-radius: 5px;'>"
            if "system_health" in analysis:
                health = analysis["system_health"]
                preview_html += (
                    f"<p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</strong> {health.get('score', 'N/A')}%</p>"
                )
            if "anomalies" in analysis:
                anomalies = analysis["anomalies"]
                preview_html += (
                    f"<p><strong>–ê–Ω–æ–º–∞–ª–∏–∏:</strong> {len(anomalies.get('anomalies', []))}</p>"
                )
            if "recommendations" in analysis:
                recs = analysis["recommendations"]
                preview_html += f"<p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> {len(recs)}</p>"
                if recs:
                    preview_html += "<ul>"
                    for rec in recs[:3]:
                        preview_html += f"<li>{rec.get('title', 'N/A')}</li>"
                    preview_html += "</ul>"
            preview_html += "</div>"
            return mark_safe(preview_html)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}"

    actions = ["export_reports", "regenerate_ai_analysis"]

    @admin.action(description="üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
    def export_reports(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤"""
        self.message_user(request, f"–≠–∫—Å–ø–æ—Ä—Ç {queryset.count()} –æ—Ç—á–µ—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    @admin.action(description="ü§ñ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑")
    def regenerate_ai_analysis(self, request, queryset):
        """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        count = 0
        for report in queryset:
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞
                count += 1
            except Exception as e:
                self.message_user(
                    request,
                    f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {report.title}: {e}",
                    level="ERROR",
                )

        self.message_user(request, f"AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {count} –æ—Ç—á–µ—Ç–æ–≤")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ö–æ–º–ø–ª–µ–∫—Å - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
admin.site.site_title = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"
