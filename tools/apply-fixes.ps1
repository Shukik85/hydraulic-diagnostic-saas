# PowerShell script to apply Ruff autofixes and formatting to backend code
# Usage: powershell -ExecutionPolicy Bypass -File .\tools\apply-fixes.ps1

param(
    [string]$Branch = "chore/lint-fixes-ci-green",
    [switch]$DryRun
)

$ErrorActionPreference = "Stop"

Write-Host "Backend Lint Fixes Automation Script"
Write-Host "===================================="
Write-Host ""

# Check if we're in the project root
if (-not (Test-Path "backend" -PathType Container)) {
    Write-Host "ERROR: Run this script from the project root directory." -ForegroundColor Red
    Write-Host "Expected to find 'backend' folder in current directory." -ForegroundColor Red
    exit 1
}

# Check if virtual environment exists
if (-not (Test-Path ".venv" -PathType Container)) {
    Write-Host "ERROR: Virtual environment not found." -ForegroundColor Red
    Write-Host "Please create it first with: python -m venv .venv" -ForegroundColor Yellow
    exit 1
}

# Activate virtual environment if not already active
if (-not $env:VIRTUAL_ENV) {
    Write-Host "Activating virtual environment..."
    & ".venv\Scripts\Activate.ps1"
    if (-not $env:VIRTUAL_ENV) {
        Write-Host "ERROR: Failed to activate virtual environment." -ForegroundColor Red
        exit 1
    }
}

Write-Host "Virtual environment active: $env:VIRTUAL_ENV"

# Pull latest changes
Write-Host "Pulling latest changes from $Branch..."
git pull origin $Branch | Out-Host

# Apply Ruff autofixes
Write-Host "Applying Ruff autofixes to backend..."
ruff check backend/ --fix | Out-Host

# Apply Ruff formatting
Write-Host "Applying Ruff formatting to backend..."
ruff format backend/ | Out-Host

# Check final lint status
Write-Host "Checking final lint status..."
$lintSucceeded = $true
try {
    ruff check backend/ | Out-Host
} catch {
    $lintSucceeded = $false
}
if ($lintSucceeded) {
    Write-Host "Ruff check passed - no blocking errors!"
} else {
    Write-Host "Some Ruff warnings remain (non-blocking)."
}

# Test pytest collection
Write-Host "Testing pytest collection..."
Push-Location backend
$pytestSucceeded = $true
try {
    pytest --collect-only -q | Out-Host
} catch {
    $pytestSucceeded = $false
}
Pop-Location
if ($pytestSucceeded) {
    Write-Host "Pytest collection successful!"
} else {
    Write-Host "ERROR: Pytest collection failed."
    Write-Host "Try running: cd backend && pytest --collect-only"
    exit 1
}

# Check git status
Write-Host "Checking git status..."
$gitStatus = git status --porcelain
if (-not $gitStatus) {
    Write-Host "No changes to commit - code is already clean!"
    Write-Host "Done."
    exit 0
}

if ($DryRun) {
    Write-Host "DRY RUN - Would commit these changes:"
    git status --short | Out-Host
    Write-Host "To actually commit, run without -DryRun flag."
    exit 0
}

# Add changes and commit
Write-Host "Adding and committing changes..."
git add backend/
$commitMessage = @"
Apply Ruff autofixes and formatting to backend code

- Fix imports organization and formatting
- Apply safe automatic code style fixes
- Resolve docstring and exception handling issues
- Maintain code functionality while improving style

Generated by: tools/apply-fixes.ps1
"@

git commit -m $commitMessage | Out-Host

# Push changes
Write-Host "Pushing changes to $Branch..."
git push origin $Branch | Out-Host

Write-Host "SUCCESS: Backend fixes applied and pushed."
Write-Host "Next steps:"
Write-Host "1. Check GitHub Actions for CI status"
Write-Host "2. Monitor any remaining lint warnings"
Write-Host "3. Ready for code review/merge"
