# Ruff configuration for hydraulic-diagnostic-saas
# Modern alternative to flake8, isort, and other Python tools

# Basic settings
line-length = 88
target-version = "py311"

# File exclusions
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # Project specific
    "migrations",
    "frontend", 
    "nuxt_frontend",
    ".nuxt",
    ".output",
]

# Include patterns
include = ["*.py", "*.pyi", "**/pyproject.toml"]

# Show fixes that were applied
show-fixes = true

# Show source code when displaying violations
show-source = true

# Respect gitignore
respect-gitignore = true

# Enable preview features
preview = true

[lint]
# Rule selection
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE", 
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR", 
    # Perflint
    "PERF",
    # Refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]

# Rule ignores
ignore = [
    # Line length handled by formatter
    "E501",
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls
    "FBT003",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for debugging)
    "T201", "T203",
    # Django-specific ignores
    "DJ001",  # Avoid using `null=True` on string-based fields
    "DJ008",  # Avoid using `__str__` in `Model.__str__`
    # Documentation ignores for now
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Allow assert statements in tests
    "S101",
    # Allow hardcoded passwords in tests/fixtures
    "S105", "S106", "S107", "S108",
    # Allow subprocess without shell=False
    "S602", "S603",
    # Pickle usage
    "S301",
    # Random generators
    "S311",
    # Ignore magic value comparisons
    "PLR2004",
    # Allow star imports in settings
    "F403", "F405",
    # Ignore too many returns
    "PLR0911",
    # Ignore unused function arguments (common in Django)
    "ARG002",
    # Ignore implicit string concatenation
    "ISC001",
    # Ignore commented out code for now
    "ERA001",
]

# Per-file rule ignores
[lint.per-file-ignores]
# Tests
"**/tests/**" = [
    "D",      # No docstrings required
    "S101",   # Allow assert
    "S105", "S106", "S107", "S108",  # Allow hardcoded passwords
    "PLR0913", "PLR0915", "PLR2004",  # Complexity in tests is OK
    "ARG001", "ARG002",  # Unused arguments are common
    "FBT001", "FBT002", "FBT003",  # Boolean args are OK in tests
    "PT011",  # pytest.raises should be specific
]

# Test files 
"test_*.py" = [
    "D", "S101", "S105", "S106", "S107", "S108",
    "PLR0913", "PLR0915", "PLR2004", "ARG001", "ARG002"
]
"**/conftest.py" = ["D", "ARG001", "ARG002"]

# Migrations
"**/migrations/**" = [
    "D",      # No docstrings required
    "E501",   # Line length can be long in migrations
    "N806",   # Allow non-lowercase variable names
    "RUF012", # Mutable class attributes
    "ERA001", # Commented code is common
]

# Django settings
"**/settings/**" = [
    "F403", "F405",  # Star imports are common
    "S105", "S106",  # Hardcoded secrets in settings are common
    "ERA001",        # Commented settings
]

# Management commands
"**/management/commands/**" = [
    "T201", "T203",  # Print statements are OK in commands
    "ARG001", "ARG002",  # Unused args in commands
]

# Scripts
"scripts/**" = [
    "T201", "T203",  # Print statements are OK in scripts
    "INP001",        # Scripts might not have __init__.py
]

[lint.flake8-annotations]
allow-star-arg-any = true

[lint.flake8-bandit]
check-typed-exception = true

[lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument", 
    "typer.Option",
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Body",
]

[lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

[lint.flake8-tidy-imports]
ban-relative-imports = "all"

[lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["apps", "core"]
sections = {"django" = ["django"]}
split-on-trailing-comma = true

[lint.mccabe]
max-complexity = 10

[lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "django.utils.decorators.classproperty",
]
staticmethod-decorators = ["staticmethod"]

[lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[format]
# Use single quotes for strings
quote-style = "double"

# Use spaces around operators
operator-spacing = true

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Normalize string quotes
normalize-quotes = true

# Use tabs or spaces for indentation
indent-style = "space"
indent-width = 4

# Line ending style
line-ending = "lf"

# Docstring formatting
docstring-code-format = true
docstring-code-line-length = 88
