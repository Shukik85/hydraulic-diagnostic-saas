[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hydraulic-diagnostic-saas"
version = "1.0.0"
description = "Intelligent SaaS platform for hydraulic systems diagnostics and monitoring"
authors = [{name = "Plotnikov Aleksandr", email = "shukik85@ya.ru"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["django", "timescaledb", "hydraulic", "diagnostics", "rag", "ai"]

[project.urls]
Homepage = "https://github.com/Shukik85/hydraulic-diagnostic-saas"
Repository = "https://github.com/Shukik85/hydraulic-diagnostic-saas"
Issues = "https://github.com/Shukik85/hydraulic-diagnostic-saas/issues"

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
    | node_modules
    | frontend
    | nuxt_frontend
  )/
)
'''
skip-string-normalization = false
skip-magic-trailing-comma = false

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_django = "django"
known_first_party = ["apps", "core"]
skip = ["migrations", "node_modules", "frontend", "nuxt_frontend"]
skip_glob = ["**/migrations/*.py", "**/node_modules/**", "**/frontend/**", "**/nuxt_frontend/**"]

[tool.pytest.ini_options]
# Fixed Django settings path
DJANGO_SETTINGS_MODULE = "core.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_paths = ["."]
testpaths = ["backend/tests", "backend/apps"]
addopts = """
  --tb=short
  --strict-markers
  --strict-config
  --disable-warnings
  --cov=backend/apps
  --cov-report=term-missing
  --cov-report=html
  --cov-report=xml
  --cov-fail-under=80
  --maxfail=5
  --reuse-db
  --nomigrations
  -ra
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
    "rag: marks tests related to RAG assistant",
    "timescale: marks tests related to TimescaleDB",
]
# Django project detection
django_find_project = true
testmon_datafile = ".testmondata"

[tool.coverage.run]
source = ["backend/apps"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "manage.py",
    "*/settings/*",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
fail_under = 80

[tool.django-stubs]
# Fixed Django settings path
django_settings_module = "core.settings"
strict_settings = false

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "frontend",
    "nuxt_frontend",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit security
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "S311",  # random generator not suitable for security/cryptographic purposes
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PT004",   # fixture does not return anything, add leading underscore
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*.py" = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "S101", "S105", "S106", "S107", "S108",
    "PLR0913", "PLR0915", "PLR2004",
    "ARG001", "ARG002",
]
"**/migrations/*.py" = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "E501", "RUF012", "ERA001",
]
"**/conftest.py" = ["D100", "D101", "D102", "D103"]
"**/manage.py" = ["D100", "T20"]
"**/settings/*.py" = ["F405", "F403"]

[tool.ruff.lint.isort]
sections = {"django" = ["django"]}
known-first-party = ["apps", "core"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
files = [
    "backend/apps",
    "backend/core",
]
exclude = [
    "migrations",
    "tests",
    "node_modules",
    "frontend",
    "nuxt_frontend",
]

[[tool.mypy.overrides]]
module = [
    "django.*",
    "rest_framework.*",
    "celery.*",
    "redis.*",
    "psycopg.*",
    "faiss.*",
    "langchain.*",
    "sentence_transformers.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [
    "tests",
    "migrations",
    "node_modules",
    "frontend",
    "nuxt_frontend",
    ".venv",
    "venv",
]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/tests/**", "**/test_*.py"]
