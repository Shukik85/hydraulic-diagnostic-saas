/**
 * WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
class WebSocketService {
  constructor() {
    this.ws = null
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 5
    this.reconnectInterval = 5000 // 5 —Å–µ–∫—É–Ω–¥
    this.listeners = new Map()
    this.isConnected = false
    this.heartbeatInterval = null
    this.heartbeatTimeout = 30000 // 30 —Å–µ–∫—É–Ω–¥
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.shouldReconnect = true
    
    // –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
    this.messageQueue = []
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   */
  connect(token = null) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'
      const host = window.location.host
      const wsUrl = `${protocol}//${host}/ws/diagnostics/`
      
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', wsUrl)
      
      // –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.ws = new WebSocket(wsUrl)
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.ws.onopen = this.onOpen.bind(this)
      this.ws.onmessage = this.onMessage.bind(this)
      this.ws.onclose = this.onClose.bind(this)
      this.ws.onerror = this.onError.bind(this)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
      this.handleReconnect()
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  onOpen(event) {
    console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    this.isConnected = true
    this.reconnectAttempts = 0
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('token')
    if (token) {
      this.send({
        type: 'auth',
        token: token
      })
    }
    
    // –ó–∞–ø—É—Å–∫ heartbeat
    this.startHeartbeat()
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.flushMessageQueue()
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    this.emit('connected', { status: 'connected' })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  onMessage(event) {
    try {
      const data = JSON.parse(event.data)
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      switch (data.type) {
        case 'auth_success':
          console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
          this.subscribeToUpdates()
          break
          
        case 'auth_failed':
          console.error('üö´ –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket')
          this.emit('auth_failed', data)
          break
          
        case 'pong':
          // –û—Ç–≤–µ—Ç –Ω–∞ ping - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ
          break
          
        case 'sensor_data':
          this.handleSensorData(data)
          break
          
        case 'critical_alert':
          this.handleCriticalAlert(data)
          break
          
        case 'diagnostic_result':
          this.handleDiagnosticResult(data)
          break
          
        case 'system_status_change':
          this.handleSystemStatusChange(data)
          break
          
        default:
          // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è–º
          this.emit(data.type, data)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  onClose(event) {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason)
    this.isConnected = false
    this.stopHeartbeat()
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–∏
    this.emit('disconnected', { 
      code: event.code, 
      reason: event.reason 
    })
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.shouldReconnect && event.code !== 1000) {
      this.handleReconnect()
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
   */
  onError(error) {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error)
    this.emit('error', { error })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  send(message) {
    if (this.isConnected && this.ws.readyState === WebSocket.OPEN) {
      try {
        const jsonMessage = JSON.stringify(message)
        this.ws.send(jsonMessage)
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      }
    } else {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      console.log('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:', message)
      this.messageQueue.push(message)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  flushMessageQueue() {
    while (this.messageQueue.length > 0) {
      const message = this.messageQueue.shift()
      this.send(message)
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  subscribeToUpdates() {
    this.send({
      type: 'subscribe',
      channels: [
        'sensor_data',
        'critical_alerts', 
        'diagnostic_results',
        'system_status'
      ]
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
   */
  handleSensorData(data) {
    this.emit('sensor_data_update', {
      systemId: data.system_id,
      sensorType: data.sensor_type,
      value: data.value,
      unit: data.unit,
      timestamp: data.timestamp,
      isCritical: data.is_critical,
      warningMessage: data.warning_message
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  handleCriticalAlert(data) {
    console.warn('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', data)
    
    this.emit('critical_alert', {
      systemId: data.system_id,
      systemName: data.system_name,
      alertType: data.alert_type,
      message: data.message,
      severity: data.severity,
      timestamp: data.timestamp,
      recommendedActions: data.recommended_actions || []
    })
    
    // –ü–æ–∫–∞–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    this.showBrowserNotification(
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      `${data.system_name}: ${data.message}`,
      'warning'
    )
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  handleDiagnosticResult(data) {
    this.emit('diagnostic_completed', {
      systemId: data.system_id,
      reportId: data.report_id,
      result: data.result,
      timestamp: data.timestamp
    })
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    this.showBrowserNotification(
      '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      `–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã "${data.system_name}" –≤—ã–ø–æ–ª–Ω–µ–Ω`,
      'info'
    )
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  handleSystemStatusChange(data) {
    this.emit('system_status_changed', {
      systemId: data.system_id,
      oldStatus: data.old_status,
      newStatus: data.new_status,
      timestamp: data.timestamp
    })
  }

  /**
   * –ü–æ–∫–∞–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  showBrowserNotification(title, message, type = 'info') {
    if ('Notification' in window && Notification.permission === 'granted') {
      const icon = this.getNotificationIcon(type)
      
      const notification = new Notification(title, {
        body: message,
        icon: icon,
        badge: icon,
        tag: 'hydraulic-system',
        renotify: true
      })
      
      // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => notification.close(), 5000)
      
      // –§–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
      notification.onclick = () => {
        window.focus()
        notification.close()
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  getNotificationIcon(type) {
    const icons = {
      'info': '/icons/info.png',
      'warning': '/icons/warning.png',
      'error': '/icons/error.png',
      'success': '/icons/success.png'
    }
    return icons[type] || icons.info
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async requestNotificationPermission() {
    if ('Notification' in window) {
      const permission = await Notification.requestPermission()
      console.log('üîî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', permission)
      return permission === 'granted'
    }
    return false
  }

  /**
   * Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  startHeartbeat() {
    this.heartbeatInterval = setInterval(() => {
      if (this.isConnected) {
        this.send({ type: 'ping' })
      }
    }, this.heartbeatTimeout)
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
   */
  stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval)
      this.heartbeatInterval = null
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      this.emit('reconnect_failed', { attempts: this.reconnectAttempts })
      return
    }
    
    this.reconnectAttempts++
    const delay = this.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`)
    
    setTimeout(() => {
      this.connect()
    }, delay)
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
   */
  on(event, callback) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, [])
    }
    this.listeners.get(event).push(callback)
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
   */
  off(event, callback) {
    if (this.listeners.has(event)) {
      const callbacks = this.listeners.get(event)
      const index = callbacks.indexOf(callback)
      if (index > -1) {
        callbacks.splice(index, 1)
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  emit(event, data) {
    if (this.listeners.has(event)) {
      this.listeners.get(event).forEach(callback => {
        try {
          callback(data)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è:', error)
        }
      })
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  subscribeToSystem(systemId) {
    this.send({
      type: 'subscribe_system',
      system_id: systemId
    })
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
   */
  unsubscribeFromSystem(systemId) {
    this.send({
      type: 'unsubscribe_system', 
      system_id: systemId
    })
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  requestSystemStatus(systemId) {
    this.send({
      type: 'get_system_status',
      system_id: systemId
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º–µ
   */
  sendSystemCommand(systemId, command, params = {}) {
    this.send({
      type: 'system_command',
      system_id: systemId,
      command: command,
      params: params
    })
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  disconnect() {
    console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
    this.shouldReconnect = false
    this.stopHeartbeat()
    
    if (this.ws) {
      this.ws.close(1000, 'Client disconnect')
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    this.listeners.clear()
    this.messageQueue = []
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      readyState: this.ws ? this.ws.readyState : WebSocket.CLOSED,
      reconnectAttempts: this.reconnectAttempts
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebSocket
   */
  static isSupported() {
    return 'WebSocket' in window
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const websocketService = new WebSocketService()

export default websocketService

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket
export class WebSocketHook {
  constructor(wsService) {
    this.wsService = wsService
    this.subscriptions = new Set()
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
   */
  useWebSocket(event, callback) {
    this.wsService.on(event, callback)
    this.subscriptions.add({ event, callback })
    
    // –í–æ–∑–≤—Ä–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.wsService.off(event, callback)
      this.subscriptions.delete({ event, callback })
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  cleanup() {
    this.subscriptions.forEach(({ event, callback }) => {
      this.wsService.off(event, callback)
    })
    this.subscriptions.clear()
  }
}

// Vue –∫–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è WebSocket
export function useWebSocket() {
  const connectionStatus = ref(websocketService.getConnectionStatus())
  const notifications = ref([])
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const updateStatus = () => {
    connectionStatus.value = websocketService.getConnectionStatus()
  }
  
  websocketService.on('connected', updateStatus)
  websocketService.on('disconnected', updateStatus)
  websocketService.on('error', updateStatus)
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  websocketService.on('critical_alert', (alert) => {
    notifications.value.unshift({
      id: Date.now(),
      type: 'critical',
      title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      message: alert.message,
      systemName: alert.systemName,
      timestamp: new Date()
    })
  })
  
  websocketService.on('diagnostic_completed', (result) => {
    notifications.value.unshift({
      id: Date.now(),
      type: 'info',
      title: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      message: '–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω',
      timestamp: new Date()
    })
  })
  
  const connect = (token) => {
    websocketService.connect(token)
  }
  
  const disconnect = () => {
    websocketService.disconnect()
  }
  
  const subscribeToSystem = (systemId) => {
    websocketService.subscribeToSystem(systemId)
  }
  
  const unsubscribeFromSystem = (systemId) => {
    websocketService.unsubscribeFromSystem(systemId)
  }
  
  const dismissNotification = (notificationId) => {
    const index = notifications.value.findIndex(n => n.id === notificationId)
    if (index > -1) {
      notifications.value.splice(index, 1)
    }
  }
  
  const clearNotifications = () => {
    notifications.value = []
  }
  
  return {
    connectionStatus: readonly(connectionStatus),
    notifications: readonly(notifications),
    connect,
    disconnect,
    subscribeToSystem,
    unsubscribeFromSystem,
    dismissNotification,
    clearNotifications,
    on: websocketService.on.bind(websocketService),
    off: websocketService.off.bind(websocketService),
    emit: websocketService.emit.bind(websocketService)
  }
}