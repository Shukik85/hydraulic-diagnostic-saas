RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\admin.py:17:20
   |
15 |       """Расширенный админ интерфейс для гидравлических систем."""
16 |
17 |       list_display = [
   |  ____________________^
18 | |         "name",
19 | |         "system_type",
20 | |         "status",
21 | |         "owner",
22 | |         "location",
23 | |         "max_pressure",
24 | |         "max_flow",
25 | |         "health_indicator",
26 | |         "last_sensor_data",
27 | |         "created_at",
28 | |     ]
   | |_____^
29 |
30 |       list_filter = [
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\admin.py:30:19
   |
28 |       ]
29 |
30 |       list_filter = [
   |  ___________________^
31 | |         "system_type",
32 | |         "status",
33 | |         "created_at",
34 | |         "owner",
35 | |         ("installation_date", admin.DateFieldListFilter),
36 | |     ]
   | |_____^
37 |
38 |       search_fields = ["name", "location", "owner__username", "owner__email"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\admin.py:38:21
   |
36 |     ]
37 |
38 |     search_fields = ["name", "location", "owner__username", "owner__email"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |
40 |     readonly_fields = [
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\admin.py:40:23
   |
38 |       search_fields = ["name", "location", "owner__username", "owner__email"]
39 |
40 |       readonly_fields = [
   |  _______________________^
41 | |         "created_at",
42 | |         "updated_at",
43 | |         "health_indicator",
44 | |         "system_statistics",
45 | |     ]
   | |_____^
46 |
47 |       fieldsets = (
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\admin.py:77:15
   |
75 |     )
76 |
77 |     actions = ["run_diagnostics", "generate_health_report", "export_system_data"]
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |
79 |     @admin.display(description="Состояние")
   |

DTZ005 `datetime.datetime.now()` called without a `tz` argument
  --> backend\apps\diagnostics\admin.py:83:23
   |
81 |         """Индикатор здоровья системы."""
82 |         try:
83 |             day_ago = datetime.now() - timedelta(days=1)
   |                       ^^^^^^^^^^^^^^
84 |             recent_data = obj.sensor_data.filter(timestamp__gte=day_ago)
   |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\admin.py:128:24
    |
126 |         """Статистика системы."""
127 |         try:
128 |             week_ago = datetime.now() - timedelta(days=7)
    |                        ^^^^^^^^^^^^^^
129 |
130 |             sensor_count = obj.sensor_data.filter(timestamp__gte=week_ago).count()
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\admin.py:160:61
    |
158 |                 DiagnosticReport.objects.create(
159 |                     system=system,
160 |                     title=f"Административная диагностика - {datetime.now().strftime('%d.%m.%Y %H:%M')}",
    |                                                             ^^^^^^^^^^^^^^
161 |                     description="Диагностика запущена через админ панель",
162 |                     severity="info",
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\admin.py:179:23
    |
178 |         for system in queryset:
179 |             day_ago = datetime.now() - timedelta(days=1)
    |                       ^^^^^^^^^^^^^^
180 |             critical_events = system.sensor_data.filter(
181 |                 timestamp__gte=day_ago, is_critical=True
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:204:20
    |
202 |       """Админ интерфейс для данных датчиков."""
203 |
204 |       list_display = [
    |  ____________________^
205 | |         "system",
206 | |         "sensor_type",
207 | |         "value_with_unit",
208 | |         "timestamp",
209 | |         "critical_indicator",
210 | |         "system_owner",
211 | |     ]
    | |_____^
212 |
213 |       list_filter = [
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:213:19
    |
211 |       ]
212 |
213 |       list_filter = [
    |  ___________________^
214 | |         "sensor_type",
215 | |         "is_critical",
216 | |         "system__system_type",
217 | |         ("timestamp", admin.DateFieldListFilter),
218 | |         "system__owner",
219 | |     ]
    | |_____^
220 |
221 |       search_fields = [
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:221:21
    |
219 |       ]
220 |
221 |       search_fields = [
    |  _____________________^
222 | |         "system__name",
223 | |         "system__owner__username",
224 | |         "warning_message",
225 | |         "sensor_type",
226 | |     ]
    | |_____^
227 |
228 |       readonly_fields = ["created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:228:23
    |
226 |     ]
227 |
228 |     readonly_fields = ["created_at"]
    |                       ^^^^^^^^^^^^^^
229 |     date_hierarchy = "timestamp"
230 |     list_per_page = 50
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:251:15
    |
249 |         return obj.system.owner.username
250 |
251 |     actions = ["mark_as_critical", "mark_as_normal", "export_sensor_data"]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
252 |
253 |     @admin.action(description="⚠️ Отметить как критические")
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:272:20
    |
270 |       """Админ интерфейс для диагностических отчетов."""
271 |
272 |       list_display = [
    |  ____________________^
273 | |         "title",
274 | |         "system",
275 | |         "severity_indicator",
276 | |         "system_owner",
277 | |         "has_ai_analysis",
278 | |         "created_at",
279 | |     ]
    | |_____^
280 |
281 |       list_filter = [
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:281:19
    |
279 |       ]
280 |
281 |       list_filter = [
    |  ___________________^
282 | |         "severity",
283 | |         "system__system_type",
284 | |         "system__owner",
285 | |         ("created_at", admin.DateFieldListFilter),
286 | |     ]
    | |_____^
287 |
288 |       search_fields = ["title", "description", "system__name", "system__owner__username"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:288:21
    |
286 |     ]
287 |
288 |     search_fields = ["title", "description", "system__name", "system__owner__username"]
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
289 |
290 |     readonly_fields = ["created_at", "updated_at", "ai_analysis_preview"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:290:23
    |
288 |     search_fields = ["title", "description", "system__name", "system__owner__username"]
289 |
290 |     readonly_fields = ["created_at", "updated_at", "ai_analysis_preview"]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
291 |
292 |     fieldsets = (
    |

RUF001 String contains ambiguous `ℹ` (INFORMATION SOURCE). Did you mean `i` (LATIN SMALL LETTER I)?
   --> backend\apps\diagnostics\admin.py:321:27
    |
319 |             "critical": "darkred",
320 |         }
321 |         icons = {"info": "ℹ️", "warning": "⚠️", "error": "❌", "critical": "🚨"}
    |                           ^
322 |
323 |         color = colors.get(obj.severity, "gray")
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\admin.py:380:15
    |
378 |             return f"Ошибка парсинга AI анализа: {e}"
379 |
380 |     actions = ["export_reports", "regenerate_ai_analysis"]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
381 |
382 |     @admin.action(description="📤 Экспорт отчетов")
    |

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\management\commands\generate_test_data.py:99:31
    |
 97 |             temperature_range="-20°C до +85°C",
 98 |             owner=user,
 99 |             installation_date=datetime.now().date()
    |                               ^^^^^^^^^^^^^^
100 |             - timedelta(days=random.randint(30, 1000)),
101 |         )
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\management\commands\generate_test_data.py:193:22
    |
191 |         """Генерация данных датчиков для одной системы."""
192 |         sensors_for_system = []
193 |         start_time = datetime.now() - timedelta(days=days_back)
    |                      ^^^^^^^^^^^^^^
194 |
195 |         # Базовые значения для системы
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

SIM102 Use a single `if` statement instead of nested `if` statements
  --> backend\apps\diagnostics\middleware.py:87:9
   |
85 |           ai_endpoints = ["/diagnose/", "/ask_question/", "/search_knowledge/"]
86 |
87 | /         if any(endpoint in request.path for endpoint in ai_endpoints):
88 | |             if request.user.is_authenticated:
   | |_____________________________________________^
89 |                   user_id = request.user.id
90 |                   current_time = time.time()
   |
help: Combine `if` statements using `and`

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\diagnostics\middleware.py:141:17
    |
139 |         if request.path == "/api/health/":
140 |             try:
141 |                 from django.db import connection
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |
143 |                 with connection.cursor() as cursor:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:104:20
    |
102 |     class Meta:
103 |         db_table = "diagnostics_hydraulicsystem"
104 |         ordering = ["-updated_at"]
    |                    ^^^^^^^^^^^^^^^
105 |         indexes = [
106 |             BTreeIndex(fields=["owner", "status"], name="idx_hs_owner_status"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:105:19
    |
103 |           db_table = "diagnostics_hydraulicsystem"
104 |           ordering = ["-updated_at"]
105 |           indexes = [
    |  ___________________^
106 | |             BTreeIndex(fields=["owner", "status"], name="idx_hs_owner_status"),
107 | |             BrinIndex(
108 | |                 fields=["updated_at"], autosummarize=True, name="brin_hs_updated"
109 | |             ),
110 | |             BrinIndex(
111 | |                 fields=["last_reading_at"],
112 | |                 autosummarize=True,
113 | |                 name="brin_hs_last_reading",
114 | |             ),
115 | |         ]
    | |_________^
116 |
117 |       def __str__(self) -> str:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:169:20
    |
167 |     class Meta:
168 |         db_table = "diagnostics_systemcomponent"
169 |         ordering = ["name"]
    |                    ^^^^^^^^
170 |         indexes = [BTreeIndex(fields=["system", "name"], name="idx_comp_system_name")]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:170:19
    |
168 |         db_table = "diagnostics_systemcomponent"
169 |         ordering = ["name"]
170 |         indexes = [BTreeIndex(fields=["system", "name"], name="idx_comp_system_name")]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
171 |
172 |     def __str__(self) -> str:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:270:20
    |
268 |     class Meta:
269 |         db_table = "diagnostics_sensordata"
270 |         ordering = ["-timestamp"]
    |                    ^^^^^^^^^^^^^^
271 |         indexes = [
272 |             BTreeIndex(fields=["system", "timestamp"], name="idx_sd_system_ts"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:271:19
    |
269 |           db_table = "diagnostics_sensordata"
270 |           ordering = ["-timestamp"]
271 |           indexes = [
    |  ___________________^
272 | |             BTreeIndex(fields=["system", "timestamp"], name="idx_sd_system_ts"),
273 | |             BTreeIndex(fields=["sensor_type", "timestamp"], name="idx_sd_type_ts"),
274 | |             BrinIndex(fields=["timestamp"], autosummarize=True, name="brin_sd_ts"),
275 | |         ]
    | |_________^
276 |
277 |       def clean(self) -> None:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:386:20
    |
384 |     class Meta:
385 |         db_table = "diagnostics_diagnosticreport"
386 |         ordering = ["-created_at"]
    |                    ^^^^^^^^^^^^^^^
387 |         indexes = [
388 |             BTreeIndex(fields=["system", "created_at"], name="idx_dr_system_created"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:387:19
    |
385 |           db_table = "diagnostics_diagnosticreport"
386 |           ordering = ["-created_at"]
387 |           indexes = [
    |  ___________________^
388 | |             BTreeIndex(fields=["system", "created_at"], name="idx_dr_system_created"),
389 | |             BTreeIndex(
390 | |                 fields=["severity", "created_at"], name="idx_dr_severity_created"
391 | |             ),
392 | |         ]
    | |_________^
393 |
394 |       def clean(self) -> None:
    |

RUF001 String contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\models.py:459:42
    |
457 |     )
458 |     measured_speed: models.FloatField = models.FloatField(
459 |         help_text="Измеренная скорость, об/мин"
    |                                          ^
460 |     )
    |

RUF001 String contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\models.py:470:41
    |
468 |     )
469 |     calculated_speed: models.FloatField = models.FloatField(
470 |         help_text="Расчетная скорость, об/мин"
    |                                         ^
471 |     )
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:509:20
    |
507 |     class Meta:
508 |         db_table = "diagnostics_mathmodelresult"
509 |         ordering = ["-timestamp"]
    |                    ^^^^^^^^^^^^^^
510 |         indexes = [
511 |             BTreeIndex(fields=["system", "timestamp"], name="idx_mmr_system_ts"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:510:19
    |
508 |           db_table = "diagnostics_mathmodelresult"
509 |           ordering = ["-timestamp"]
510 |           indexes = [
    |  ___________________^
511 | |             BTreeIndex(fields=["system", "timestamp"], name="idx_mmr_system_ts"),
512 | |             BTreeIndex(fields=["status", "timestamp"], name="idx_mmr_status_ts"),
513 | |             BrinIndex(fields=["timestamp"], autosummarize=True, name="brin_mmr_ts"),
514 | |         ]
    | |_________^
515 |
516 |       def __str__(self) -> str:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:595:20
    |
593 |     class Meta:
594 |         db_table = "diagnostics_phaseportraitresult"
595 |         ordering = ["-timestamp"]
    |                    ^^^^^^^^^^^^^^
596 |         indexes = [
597 |             BTreeIndex(fields=["system", "timestamp"], name="idx_ppr_system_ts"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:596:19
    |
594 |           db_table = "diagnostics_phaseportraitresult"
595 |           ordering = ["-timestamp"]
596 |           indexes = [
    |  ___________________^
597 | |             BTreeIndex(fields=["system", "timestamp"], name="idx_ppr_system_ts"),
598 | |             BTreeIndex(fields=["portrait_type", "timestamp"], name="idx_ppr_type_ts"),
599 | |             BrinIndex(fields=["timestamp"], autosummarize=True, name="brin_ppr_ts"),
600 | |         ]
    | |_________^
601 |
602 |       def __str__(self) -> str:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:689:20
    |
687 |     class Meta:
688 |         db_table = "diagnostics_tribodiagnosticresult"
689 |         ordering = ["-analysis_date"]
    |                    ^^^^^^^^^^^^^^^^^^
690 |         indexes = [
691 |             BTreeIndex(fields=["system", "analysis_date"], name="idx_tdr_system_date"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:690:19
    |
688 |           db_table = "diagnostics_tribodiagnosticresult"
689 |           ordering = ["-analysis_date"]
690 |           indexes = [
    |  ___________________^
691 | |             BTreeIndex(fields=["system", "analysis_date"], name="idx_tdr_system_date"),
692 | |             BTreeIndex(fields=["iso_class", "analysis_date"], name="idx_tdr_iso_date"),
693 | |             BrinIndex(
694 | |                 fields=["analysis_date"], autosummarize=True, name="brin_tdr_date"
695 | |             ),
696 | |         ]
    | |_________^
697 |
698 |       def __str__(self) -> str:
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:811:20
    |
809 |     class Meta:
810 |         db_table = "diagnostics_integratedresult"
811 |         ordering = ["-timestamp"]
    |                    ^^^^^^^^^^^^^^
812 |         indexes = [
813 |             BTreeIndex(fields=["system", "timestamp"], name="idx_idr_system_ts"),
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\models.py:812:19
    |
810 |           db_table = "diagnostics_integratedresult"
811 |           ordering = ["-timestamp"]
812 |           indexes = [
    |  ___________________^
813 | |             BTreeIndex(fields=["system", "timestamp"], name="idx_idr_system_ts"),
814 | |             BTreeIndex(
815 | |                 fields=["overall_status", "timestamp"], name="idx_idr_status_ts"
816 | |             ),
817 | |             BTreeIndex(
818 | |                 fields=["integrated_score", "timestamp"], name="idx_idr_score_ts"
819 | |             ),
820 | |             BrinIndex(fields=["timestamp"], autosummarize=True, name="brin_idr_ts"),
821 | |         ]
    | |_________^
822 |
823 |       def save(self, *args, **kwargs) -> None:  # type: ignore[no-untyped-def]
    |

PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
  --> backend\apps\diagnostics\rag_system.py:26:24
   |
24 |         self.knowledge_texts: list[str] = []
25 |         self.knowledge_metadata: list[dict[str, Any]] = []
26 |         self.db_path = os.path.join(settings.BASE_DIR, "knowledge_base.db")
   |                        ^^^^^^^^^^^^
27 |         self._initialize_knowledge_base()
   |

RUF001 String contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\rag_system.py:98:69
    |
 96 | …     "title": "Диагностика по давлению в гидросистеме",
 97 | …     "content": (
 98 | …         "Нормальное рабочее давление составляет 150-250 бар для промышленных систем. "
    |                                                           ^
 99 | …         "Давление ниже 100 бар может указывать на износ насоса или утечки. Давление выше 300 бар - "
100 | …         "на засорение фильтров или неисправность предохранительного клапана. Колебания давления более ±5% "
    |

RUF001 String contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\rag_system.py:99:40
    |
 97 | …     "content": (
 98 | …         "Нормальное рабочее давление составляет 150-250 бар для промышленных систем. "
 99 | …         "Давление ниже 100 бар может указывать на износ насоса или утечки. Давление выше 300 бар - "
    |                              ^
100 | …         "на засорение фильтров или неисправность предохранительного клапана. Колебания давления более ±5% "
101 | …         "от номинального указывают на нестабильность системы."
    |

RUF001 String contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\rag_system.py:99:106
    |
 97 | …     "content": (
 98 | …         "Нормальное рабочее давление составляет 150-250 бар для промышленных систем. "
 99 | …         "Давление ниже 100 бар может указывать на износ насоса или утечки. Давление выше 300 бар - "
    |                                                                                                ^
100 | …         "на засорение фильтров или неисправность предохранительного клапана. Колебания давления более ±5% "
101 | …         "от номинального указывают на нестабильность системы."
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:36:18
   |
34 |     class Meta:
35 |         model = User
36 |         fields = ["id", "username", "email", "first_name", "last_name"]
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         read_only_fields = fields
   |

D205 1 blank line required between summary line and description
  --> backend\apps\diagnostics\serializers.py:41:5
   |
40 |   class EquipmentSerializer(serializers.Serializer):
41 | /     """Зависит от реальной модели Equipment.
42 | |     Здесь приведён шаблон, подставьте реальную модель и поля.
43 | |     """
   | |_______^
44 |
45 |       id = serializers.UUIDField(read_only=True)
   |
help: Insert single blank line

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:55:18
   |
53 |     class Meta:
54 |         model = SensorData
55 |         fields = ["id", "system", "component", "timestamp", "value", "unit"]
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |         read_only_fields = ["id"]
57 |         extra_kwargs = {
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:56:28
   |
54 |         model = SensorData
55 |         fields = ["id", "system", "component", "timestamp", "value", "unit"]
56 |         read_only_fields = ["id"]
   |                            ^^^^^^
57 |         extra_kwargs = {
58 |             "timestamp": {"default": timezone.now},
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:57:24
   |
55 |           fields = ["id", "system", "component", "timestamp", "value", "unit"]
56 |           read_only_fields = ["id"]
57 |           extra_kwargs = {
   |  ________________________^
58 | |             "timestamp": {"default": timezone.now},
59 | |         }
   | |_________^
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:67:18
   |
65 |     class Meta:
66 |         model = SystemComponent
67 |         fields = ["id", "system", "name", "specification", "created_at", "updated_at"]
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |         read_only_fields = ["id", "created_at", "updated_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:68:28
   |
66 |         model = SystemComponent
67 |         fields = ["id", "system", "name", "specification", "created_at", "updated_at"]
68 |         read_only_fields = ["id", "created_at", "updated_at"]
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\serializers.py:81:18
   |
79 |       class Meta:
80 |           model = HydraulicSystem
81 |           fields = [
   |  __________________^
82 | |             "id",
83 | |             "name",
84 | |             "description",
85 | |             "system_type",
86 | |             "system_type_display",
87 | |             "status",
88 | |             "status_display",
89 | |             "criticality",
90 | |             "criticality_display",
91 | |             "created_at",
92 | |             "updated_at",
93 | |             "latest_activity",
94 | |         ]
   | |_________^
95 |           read_only_fields = [
96 |               "id",
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\serializers.py:95:28
    |
 93 |               "latest_activity",
 94 |           ]
 95 |           read_only_fields = [
    |  ____________________________^
 96 | |             "id",
 97 | |             "created_at",
 98 | |             "updated_at",
 99 | |             "latest_activity",
100 | |         ]
    | |_________^
101 |
102 |       def get_system_type_display(self, obj):
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\serializers.py:150:18
    |
148 |       class Meta:
149 |           model = DiagnosticReport
150 |           fields = [
    |  __________________^
151 | |             "id",
152 | |             "system",
153 | |             "title",
154 | |             "severity",
155 | |             "severity_display",
156 | |             "status",
157 | |             "status_display",
158 | |             "ai_confidence",
159 | |             "created_by",
160 | |             "created_at",
161 | |             "updated_at",
162 | |         ]
    | |_________^
163 |           read_only_fields = [
164 |               "id",
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\serializers.py:163:28
    |
161 |               "updated_at",
162 |           ]
163 |           read_only_fields = [
    |  ____________________________^
164 | |             "id",
165 | |             "system",
166 | |             "severity_display",
167 | |             "status_display",
168 | |             "created_by",
169 | |             "created_at",
170 | |             "updated_at",
171 | |         ]
    | |_________^
172 |
173 |       def get_severity_display(self, obj):
    |

D205 1 blank line required between summary line and description
   --> backend\apps\diagnostics\serializers.py:193:5
    |
192 |   class DiagnosticEngineSettingsSerializer(serializers.Serializer):
193 | /     """Пример сериализатора настроек для DiagnosticEngine.
194 | |     Замените на реальные поля настроек при необходимости.
195 | |     """
    | |_______^
196 |
197 |       model_type = serializers.ChoiceField(choices=["isolation_forest", "random_forest"])
    |
help: Insert single blank line

D205 1 blank line required between summary line and description
  --> backend\apps\diagnostics\services.py:11:5
   |
10 |   class DiagnosticEngine:
11 | /     """Основной движок диагностики гидравлических систем.
12 | |     Анализирует данные датчиков, выявляет аномалии и создает диагностические отчёты.
13 | |     """
   | |_______^
14 |
15 |       # Пороговые значения для различных параметров
   |
help: Insert single blank line

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\services.py:16:55
   |
15 |       # Пороговые значения для различных параметров
16 |       ANOMALY_THRESHOLDS: dict[str, dict[str, float]] = {
   |  _______________________________________________________^
17 | |         "pressure": {"min": 10, "max": 300},  # бар
18 | |         "temperature": {"min": 20, "max": 80},  # °C
19 | |         "flow_rate": {"min": 0.1, "max": 100},  # л/мин
20 | |         "vibration": {"min": 0, "max": 5},  # мм/с
21 | |         "oil_level": {"min": 20, "max": 100},  # %
22 | |     }
   | |_____^
23 |
24 |       def analyze_system(
   |

RUF003 Comment contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
  --> backend\apps\diagnostics\services.py:17:49
   |
15 |     # Пороговые значения для различных параметров
16 |     ANOMALY_THRESHOLDS: dict[str, dict[str, float]] = {
17 |         "pressure": {"min": 10, "max": 300},  # бар
   |                                                 ^
18 |         "temperature": {"min": 20, "max": 80},  # °C
19 |         "flow_rate": {"min": 0.1, "max": 100},  # л/мин
   |

RUF002 Docstring contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\apps\diagnostics\services.py:158:43
    |
157 |     def _get_anomaly_message(self, parameter: str, value: float, severity: str) -> str:
158 |         """Генерирует понятное сообщение об аномалии."""
    |                                           ^
159 |         messages: dict[str, dict[str, str]] = {
160 |             "pressure": {
    |

ARG001 Unused function argument: `sender`
  --> backend\apps\diagnostics\signals.py:16:5
   |
14 | @receiver(post_save, sender=SystemComponent)
15 | def update_components_count_on_create(
16 |     sender: type[SystemComponent],
   |     ^^^^^^
17 |     instance: SystemComponent,
18 |     created: bool,
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\diagnostics\signals.py:19:7
   |
17 |     instance: SystemComponent,
18 |     created: bool,
19 |     **kwargs: Any,
   |       ^^^^^^
20 | ) -> None:
21 |     """Выполняет update components count on create
   |

D205 1 blank line required between summary line and description
  --> backend\apps\diagnostics\signals.py:21:5
   |
19 |       **kwargs: Any,
20 |   ) -> None:
21 | /     """Выполняет update components count on create
22 | |     Args:
23 | |         sender (Any): Параметр sender
24 | |         instance (Any): Параметр instance
25 | |         created (Any): Параметр created.
26 | |
27 | |     """
   | |_______^
28 |       if created:
29 |           sys_pk = getattr(instance.system, "pk", None)
   |
help: Insert single blank line

ARG001 Unused function argument: `sender`
  --> backend\apps\diagnostics\signals.py:38:5
   |
36 | @receiver(post_delete, sender=SystemComponent)
37 | def update_components_count_on_delete(
38 |     sender: type[SystemComponent], instance: SystemComponent, **kwargs: Any
   |     ^^^^^^
39 | ) -> None:
40 |     """Выполняет update components count on delete.
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\diagnostics\signals.py:38:65
   |
36 | @receiver(post_delete, sender=SystemComponent)
37 | def update_components_count_on_delete(
38 |     sender: type[SystemComponent], instance: SystemComponent, **kwargs: Any
   |                                                                 ^^^^^^
39 | ) -> None:
40 |     """Выполняет update components count on delete.
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\diagnostics\signals.py:57:5
   |
55 | @receiver(post_save, sender=SensorData)
56 | def update_last_reading_at(
57 |     sender: type[SensorData], instance: SensorData, created: bool, **kwargs: Any
   |     ^^^^^^
58 | ) -> None:
59 |     """Выполняет update last reading at.
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\diagnostics\signals.py:57:70
   |
55 | @receiver(post_save, sender=SensorData)
56 | def update_last_reading_at(
57 |     sender: type[SensorData], instance: SensorData, created: bool, **kwargs: Any
   |                                                                      ^^^^^^
58 | ) -> None:
59 |     """Выполняет update last reading at.
   |

ARG001 Unused function argument: `db`
  --> backend\apps\diagnostics\tests.py:22:10
   |
21 | @pytest.fixture
22 | def user(db):
   |          ^^
23 |     """Выполняет user.
   |

DTZ005 `datetime.datetime.now()` called without a `tz` argument
  --> backend\apps\diagnostics\tests\test_ai_engine.py:34:22
   |
32 |         """Создание тестовых данных датчиков"""
33 |         sensor_data = []
34 |         start_time = datetime.now() - timedelta(hours=hours_back)
   |                      ^^^^^^^^^^^^^^
35 |
36 |         current_time = start_time
   |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
  --> backend\apps\diagnostics\tests\test_ai_engine.py:37:31
   |
36 |         current_time = start_time
37 |         while current_time <= datetime.now():
   |                               ^^^^^^^^^^^^^^
38 |             sensor_data.extend(
39 |                 [
   |
help: Pass a `datetime.timezone` object to the `tz` parameter

PT017 Found assertion on exception `e` in `except` block, use `pytest.raises()` instead
   --> backend\apps\diagnostics\tests\test_timescale.py:236:13
    |
234 |             # В тестовой среде задача может не выполниться полностью
235 |             # но должна обрабатывать ошибки корректно
236 |             assert isinstance(e, Exception)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\diagnostics\tests\test_timescale.py:247:9
    |
245 |             self.skipTest("TimescaleDB extension not available")
246 |
247 |         import time
    |         ^^^^^^^^^^^
248 |
249 |         # Создаем большое количество данных
    |

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\diagnostics\tests\test_timescale.py:287:9
    |
285 |             self.skipTest("TimescaleDB extension not available")
286 |
287 |         import time
    |         ^^^^^^^^^^^
288 |
289 |         # Создаем данные за последние 30 дней
    |

ARG001 Unused function argument: `chunk_interval`
  --> backend\apps\diagnostics\timescale_tasks.py:33:5
   |
31 |     start_time: str | None = None,
32 |     end_time: str | None = None,
33 |     chunk_interval: str = "7 days",
   |     ^^^^^^^^^^^^^^
34 | ) -> dict[str, Any]:
35 |     """Обеспечивает создание chunk'ов TimescaleDB для указанного временного диапазона."""
   |

B012 `return` inside `finally` blocks cause exceptions to be silenced
   --> backend\apps\diagnostics\timescale_tasks.py:103:13
    |
101 |             self.retry(countdown=60, exc=exc)  # type: ignore[call-arg]
102 |         finally:
103 |             return {"status": "retry", "error": str(exc)}
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B012 `return` inside `finally` blocks cause exceptions to be silenced
   --> backend\apps\diagnostics\timescale_tasks.py:160:13
    |
158 |             self.retry(countdown=300, exc=exc)  # type: ignore[call-arg]
159 |         finally:
160 |             return {"status": "retry", "error": str(exc)}
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:31:26
   |
30 | class BaseModelViewSet(viewsets.ModelViewSet):
31 |     permission_classes = [permissions.IsAuthenticated]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |     pagination_class = StandardResultsSetPagination
33 |     filter_backends = [
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:33:23
   |
31 |       permission_classes = [permissions.IsAuthenticated]
32 |       pagination_class = StandardResultsSetPagination
33 |       filter_backends = [
   |  _______________________^
34 | |         DjangoFilterBackend,
35 | |         filters.SearchFilter,
36 | |         filters.OrderingFilter,
37 | |     ]
   | |_____^
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:42:24
   |
40 | class HydraulicSystemViewSet(BaseModelViewSet):
41 |     serializer_class = HydraulicSystemListSerializer
42 |     filterset_fields = ["system_type", "status", "criticality"]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |     search_fields = ["name", "description"]
44 |     ordering_fields = ["name", "created_at", "updated_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:43:21
   |
41 |     serializer_class = HydraulicSystemListSerializer
42 |     filterset_fields = ["system_type", "status", "criticality"]
43 |     search_fields = ["name", "description"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^
44 |     ordering_fields = ["name", "created_at", "updated_at"]
45 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:44:23
   |
42 |     filterset_fields = ["system_type", "status", "criticality"]
43 |     search_fields = ["name", "description"]
44 |     ordering_fields = ["name", "created_at", "updated_at"]
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\diagnostics\views.py:45:16
   |
43 |     search_fields = ["name", "description"]
44 |     ordering_fields = ["name", "created_at", "updated_at"]
45 |     ordering = ["-created_at"]
   |                ^^^^^^^^^^^^^^^
46 |
47 |     def get_queryset(self):
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:121:24
    |
119 | class SystemComponentViewSet(BaseModelViewSet):
120 |     serializer_class = SystemComponentSerializer
121 |     filterset_fields = ["system"]
    |                        ^^^^^^^^^^
122 |     search_fields = ["name"]
123 |     ordering_fields = ["name", "created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:122:21
    |
120 |     serializer_class = SystemComponentSerializer
121 |     filterset_fields = ["system"]
122 |     search_fields = ["name"]
    |                     ^^^^^^^^
123 |     ordering_fields = ["name", "created_at"]
124 |     ordering = ["name"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:123:23
    |
121 |     filterset_fields = ["system"]
122 |     search_fields = ["name"]
123 |     ordering_fields = ["name", "created_at"]
    |                       ^^^^^^^^^^^^^^^^^^^^^^
124 |     ordering = ["name"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:124:16
    |
122 |     search_fields = ["name"]
123 |     ordering_fields = ["name", "created_at"]
124 |     ordering = ["name"]
    |                ^^^^^^^^
125 |
126 |     def get_queryset(self):
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:133:26
    |
131 | class SensorDataViewSet(viewsets.ReadOnlyModelViewSet):
132 |     serializer_class = SensorDataSerializer
133 |     permission_classes = [permissions.IsAuthenticated]
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
134 |     pagination_class = StandardResultsSetPagination
135 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:135:23
    |
133 |     permission_classes = [permissions.IsAuthenticated]
134 |     pagination_class = StandardResultsSetPagination
135 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 |     filterset_fields = ["system", "component"]
137 |     ordering_fields = ["timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:136:24
    |
134 |     pagination_class = StandardResultsSetPagination
135 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
136 |     filterset_fields = ["system", "component"]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^
137 |     ordering_fields = ["timestamp"]
138 |     ordering = ["-timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:137:23
    |
135 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
136 |     filterset_fields = ["system", "component"]
137 |     ordering_fields = ["timestamp"]
    |                       ^^^^^^^^^^^^^
138 |     ordering = ["-timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:138:16
    |
136 |     filterset_fields = ["system", "component"]
137 |     ordering_fields = ["timestamp"]
138 |     ordering = ["-timestamp"]
    |                ^^^^^^^^^^^^^^
139 |
140 |     def get_queryset(self):
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:147:24
    |
145 | class DiagnosticReportViewSet(BaseModelViewSet):
146 |     serializer_class = DiagnosticReportSerializer
147 |     filterset_fields = ["system", "severity", "status"]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |     search_fields = ["title"]
149 |     ordering_fields = ["created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:148:21
    |
146 |     serializer_class = DiagnosticReportSerializer
147 |     filterset_fields = ["system", "severity", "status"]
148 |     search_fields = ["title"]
    |                     ^^^^^^^^^
149 |     ordering_fields = ["created_at"]
150 |     ordering = ["-created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:149:23
    |
147 |     filterset_fields = ["system", "severity", "status"]
148 |     search_fields = ["title"]
149 |     ordering_fields = ["created_at"]
    |                       ^^^^^^^^^^^^^^
150 |     ordering = ["-created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\diagnostics\views.py:150:16
    |
148 |     search_fields = ["title"]
149 |     ordering_fields = ["created_at"]
150 |     ordering = ["-created_at"]
    |                ^^^^^^^^^^^^^^^
151 |
152 |     def get_queryset(self):
    |

DTZ005 `datetime.datetime.now()` called without a `tz` argument
  --> backend\apps\diagnostics\websocket_consumers.py:44:34
   |
42 |                     "type": "connection_established",
43 |                     "message": "Подключение к диагностической системе установлено",
44 |                     "timestamp": datetime.now().isoformat(),
   |                                  ^^^^^^^^^^^^^^
45 |                 }
46 |             )
   |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:146:43
    |
144 |         """Обработка ping запроса."""
145 |         await self.send_message(
146 |             {"type": "pong", "timestamp": datetime.now().isoformat()}
    |                                           ^^^^^^^^^^^^^^
147 |         )
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:242:30
    |
240 |                 "latest_sensor_data": latest_sensor_data,
241 |                 "critical_events_count": len(critical_events),
242 |                 "timestamp": datetime.now().isoformat(),
    |                              ^^^^^^^^^^^^^^
243 |             }
244 |         )
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:399:30
    |
397 |                 "type": "error",
398 |                 "message": error_message,
399 |                 "timestamp": datetime.now().isoformat(),
    |                              ^^^^^^^^^^^^^^
400 |             }
401 |         )
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:413:56
    |
411 |                 await asyncio.sleep(30)  # Ping каждые 30 секунд
412 |                 await self.send_message(
413 |                     {"type": "heartbeat", "timestamp": datetime.now().isoformat()}
    |                                                        ^^^^^^^^^^^^^^
414 |                 )
415 |         except asyncio.CancelledError:
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\diagnostics\websocket_consumers.py:425:13
    |
423 |             # Простая проверка токена
424 |             # В реальном приложении здесь должна быть проверка JWT токена
425 |             from django.contrib.auth.models import User
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
426 |
427 |             return User.objects.filter(is_active=True).first()
    |

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:481:27
    |
479 |         """Получение недавних критических событий."""
480 |         try:
481 |             cutoff_time = datetime.now() - timedelta(hours=hours)
    |                           ^^^^^^^^^^^^^^
482 |             critical_events = SensorData.objects.filter(
483 |                 system_id=system_id, is_critical=True, timestamp__gte=cutoff_time
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

DTZ005 `datetime.datetime.now()` called without a `tz` argument
   --> backend\apps\diagnostics\websocket_consumers.py:535:22
    |
533 |         "message": message,
534 |         "severity": severity,
535 |         "timestamp": datetime.now().isoformat(),
    |                      ^^^^^^^^^^^^^^
536 |         "recommended_actions": [],
537 |     }
    |
help: Pass a `datetime.timezone` object to the `tz` parameter

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:10:20
   |
 8 |   @admin.register(Document)
 9 |   class DocumentAdmin(admin.ModelAdmin):
10 |       list_display = [
   |  ____________________^
11 | |         "title",
12 | |         "language",
13 | |         "format",
14 | |         "rag_system",
15 | |         "created_at",
16 | |         "updated_at",
17 | |     ]
   | |_____^
18 |       list_filter = ["language", "format", "rag_system", "created_at"]
19 |       search_fields = ["title", "content", "rag_system__name"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:18:19
   |
16 |         "updated_at",
17 |     ]
18 |     list_filter = ["language", "format", "rag_system", "created_at"]
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |     search_fields = ["title", "content", "rag_system__name"]
20 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:19:21
   |
17 |     ]
18 |     list_filter = ["language", "format", "rag_system", "created_at"]
19 |     search_fields = ["title", "content", "rag_system__name"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:20:16
   |
18 |     list_filter = ["language", "format", "rag_system", "created_at"]
19 |     search_fields = ["title", "content", "rag_system__name"]
20 |     ordering = ["-created_at"]
   |                ^^^^^^^^^^^^^^^
21 |
22 |     def get_queryset(self, request):
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:28:20
   |
26 | @admin.register(RagSystem)
27 | class RagSystemAdmin(admin.ModelAdmin):
28 |     list_display = ["name", "description", "created_at", "updated_at"]
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 |     search_fields = ["name", "description"]
30 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:29:21
   |
27 | class RagSystemAdmin(admin.ModelAdmin):
28 |     list_display = ["name", "description", "created_at", "updated_at"]
29 |     search_fields = ["name", "description"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^
30 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:30:16
   |
28 |     list_display = ["name", "description", "created_at", "updated_at"]
29 |     search_fields = ["name", "description"]
30 |     ordering = ["-created_at"]
   |                ^^^^^^^^^^^^^^^
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:35:20
   |
33 | @admin.register(RagQueryLog)
34 | class RagQueryLogAdmin(admin.ModelAdmin):
35 |     list_display = ["system", "query_text_preview", "timestamp"]
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |     search_fields = ["system__name", "query_text"]
37 |     ordering = ["-timestamp"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:36:21
   |
34 | class RagQueryLogAdmin(admin.ModelAdmin):
35 |     list_display = ["system", "query_text_preview", "timestamp"]
36 |     search_fields = ["system__name", "query_text"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |     ordering = ["-timestamp"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\admin.py:37:16
   |
35 |     list_display = ["system", "query_text_preview", "timestamp"]
36 |     search_fields = ["system__name", "query_text"]
37 |     ordering = ["-timestamp"]
   |                ^^^^^^^^^^^^^^
38 |
39 |     def get_queryset(self, request):
   |

RUF001 String contains ambiguous `ℹ` (INFORMATION SOURCE). Did you mean `i` (LATIN SMALL LETTER I)?
  --> backend\apps\rag_assistant\apps.py:46:18
   |
44 |             print(f"⚠️ Отсутствуют пакеты: {', '.join(missing_packages)}")
45 |             print(
46 |                 "ℹ️ Установите их: pip install sentence-transformers scikit-learn numpy pandas"
   |                  ^
47 |             )
   |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\apps\rag_assistant\llm_factory.py:11:18
   |
 9 | # LangChain Ollama provider (modern imports)
10 | from langchain_ollama import (
11 |     ChatOllama,  # type: ignore
   |                  ^^^^^^^^^^^^^^
12 |     OllamaEmbeddings,  # type: ignore
13 | )
   |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\apps\rag_assistant\llm_factory.py:12:24
   |
10 | from langchain_ollama import (
11 |     ChatOllama,  # type: ignore
12 |     OllamaEmbeddings,  # type: ignore
   |                        ^^^^^^^^^^^^^^
13 | )
   |

D205 1 blank line required between summary line and description
  --> backend\apps\rag_assistant\middleware.py:25:5
   |
24 |   class PerformanceMonitoringMiddleware(MiddlewareMixin):
25 | /     """Middleware для мониторинга производительности API
26 | |     Отслеживает время ответа, меморию, медленные запросы.
27 | |     """
   | |_______^
28 |
29 |       def __init__(self, get_response):
   |
help: Insert single blank line

D205 1 blank line required between summary line and description
   --> backend\apps\rag_assistant\middleware.py:208:5
    |
207 |   class TimingMiddleware(MiddlewareMixin):
208 | /     """Упрощенный middleware для отслеживания времени ответа
209 | |     Легковесный и быстрый.
210 | |     """
    | |_______^
211 |
212 |       def __init__(self, get_response):
    |
help: Insert single blank line

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\models.py:12:22
   |
10 |       """Хранит исходные документы разных форматов и языков."""
11 |
12 |       FORMAT_CHOICES = [
   |  ______________________^
13 | |         ("txt", "PlainText"),
14 | |         ("pdf", "PDF"),
15 | |         ("docx", "Word"),
16 | |         ("md", "Markdown"),
17 | |     ]
   | |_____^
18 |       LANGUAGE_CHOICES = [
19 |           ("en", "English"),
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\models.py:18:24
   |
16 |           ("md", "Markdown"),
17 |       ]
18 |       LANGUAGE_CHOICES = [
   |  ________________________^
19 | |         ("en", "English"),
20 | |         ("ru", "Russian"),
21 | |         ("de", "German"),
22 | |     ]
   | |_____^
23 |
24 |       title: models.CharField = models.CharField(max_length=255, verbose_name="Название")
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\models.py:39:19
   |
38 |       class Meta:
39 |           indexes = [
   |  ___________________^
40 | |             models.Index(fields=["language", "format"]),
41 | |             models.Index(fields=["created_at"]),
42 | |         ]
   | |_________^
43 |           verbose_name = "Документ"
44 |           verbose_name_plural = "Документы"
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\models.py:92:19
   |
90 |           verbose_name = "Лог запроса RAG"
91 |           verbose_name_plural = "Логи запросов RAG"
92 |           indexes = [
   |  ___________________^
93 | |             models.Index(fields=["timestamp"]),
94 | |             models.Index(fields=["system", "timestamp"]),
95 | |         ]
   | |_________^
96 |
97 |       def __str__(self) -> str:
   |

D205 1 blank line required between summary line and description
  --> backend\apps\rag_assistant\optimized_views.py:39:5
   |
38 |   class OptimizedDocumentViewSet(viewsets.ModelViewSet):
39 | /     """Оптимизированный ViewSet для документов с:
40 | |     - select_related/prefetch_related для оптимизации запросов
41 | |     - кеширование списков на 5 минут
42 | |     - разные поля для list и detail вьюх
43 | |     - async обработка через Celery.
44 | |     """
   | |_______^
45 |
46 |       serializer_class = DocumentSerializer
   |
help: Insert single blank line

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:48:23
   |
46 |       serializer_class = DocumentSerializer
47 |       pagination_class = StandardResultsSetPagination
48 |       filter_backends = [
   |  _______________________^
49 | |         DjangoFilterBackend,
50 | |         filters.SearchFilter,
51 | |         filters.OrderingFilter,
52 | |     ]
   | |_____^
53 |       filterset_fields = ["language", "format", "rag_system"]
54 |       search_fields = ["title", "content"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:53:24
   |
51 |         filters.OrderingFilter,
52 |     ]
53 |     filterset_fields = ["language", "format", "rag_system"]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |     search_fields = ["title", "content"]
55 |     ordering_fields = ["created_at", "updated_at", "title"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:54:21
   |
52 |     ]
53 |     filterset_fields = ["language", "format", "rag_system"]
54 |     search_fields = ["title", "content"]
   |                     ^^^^^^^^^^^^^^^^^^^^
55 |     ordering_fields = ["created_at", "updated_at", "title"]
56 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:55:23
   |
53 |     filterset_fields = ["language", "format", "rag_system"]
54 |     search_fields = ["title", "content"]
55 |     ordering_fields = ["created_at", "updated_at", "title"]
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |     ordering = ["-created_at"]
57 |     throttle_classes = [UserRateThrottle, AnonRateThrottle]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:56:16
   |
54 |     search_fields = ["title", "content"]
55 |     ordering_fields = ["created_at", "updated_at", "title"]
56 |     ordering = ["-created_at"]
   |                ^^^^^^^^^^^^^^^
57 |     throttle_classes = [UserRateThrottle, AnonRateThrottle]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\optimized_views.py:57:24
   |
55 |     ordering_fields = ["created_at", "updated_at", "title"]
56 |     ordering = ["-created_at"]
57 |     throttle_classes = [UserRateThrottle, AnonRateThrottle]
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |
59 |     def get_queryset(self):
   |

SIM102 Use a single `if` statement instead of nested `if` statements
  --> backend\apps\rag_assistant\optimized_views.py:78:9
   |
77 |           # Фильтрация по пользователю (будущая функциональность)
78 | /         if hasattr(self.request, "user") and self.request.user.is_authenticated:
79 | |             if not self.request.user.is_staff:
   | |______________________________________________^
80 |                   # Обычные пользователи видят только публичные документы
81 |                   # queryset = queryset.filter(is_public=True)  # Будущая функция
   |
help: Combine `if` statements using `and`

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:204:23
    |
202 |       serializer_class = RagSystemSerializer
203 |       pagination_class = StandardResultsSetPagination
204 |       filter_backends = [
    |  _______________________^
205 | |         DjangoFilterBackend,
206 | |         filters.SearchFilter,
207 | |         filters.OrderingFilter,
208 | |     ]
    | |_____^
209 |       search_fields = ["name", "description"]
210 |       ordering_fields = ["created_at", "name"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:209:21
    |
207 |         filters.OrderingFilter,
208 |     ]
209 |     search_fields = ["name", "description"]
    |                     ^^^^^^^^^^^^^^^^^^^^^^^
210 |     ordering_fields = ["created_at", "name"]
211 |     ordering = ["-created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:210:23
    |
208 |     ]
209 |     search_fields = ["name", "description"]
210 |     ordering_fields = ["created_at", "name"]
    |                       ^^^^^^^^^^^^^^^^^^^^^^
211 |     ordering = ["-created_at"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:211:16
    |
209 |     search_fields = ["name", "description"]
210 |     ordering_fields = ["created_at", "name"]
211 |     ordering = ["-created_at"]
    |                ^^^^^^^^^^^^^^^
212 |
213 |     @method_decorator(cache_page(60 * 10))  # 10 минут кеш
    |

D205 1 blank line required between summary line and description
   --> backend\apps\rag_assistant\optimized_views.py:298:5
    |
297 |   class OptimizedRagQueryLogViewSet(viewsets.ReadOnlyModelViewSet):
298 | /     """Оптимизированный ViewSet для логов RAG запросов
299 | |     ReadOnly - только чтение, создание через RAG service.
300 | |     """
    | |_______^
301 |
302 |       serializer_class = RagQueryLogSerializer
    |
help: Insert single blank line

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:304:23
    |
302 |     serializer_class = RagQueryLogSerializer
303 |     pagination_class = LargeResultsSetPagination  # Большая пагинация для логов
304 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
305 |     filterset_fields = ["system", "user"]
306 |     ordering_fields = ["timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:305:24
    |
303 |     pagination_class = LargeResultsSetPagination  # Большая пагинация для логов
304 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
305 |     filterset_fields = ["system", "user"]
    |                        ^^^^^^^^^^^^^^^^^^
306 |     ordering_fields = ["timestamp"]
307 |     ordering = ["-timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:306:23
    |
304 |     filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
305 |     filterset_fields = ["system", "user"]
306 |     ordering_fields = ["timestamp"]
    |                       ^^^^^^^^^^^^^
307 |     ordering = ["-timestamp"]
308 |     permission_classes = [permissions.IsAuthenticated]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:307:16
    |
305 |     filterset_fields = ["system", "user"]
306 |     ordering_fields = ["timestamp"]
307 |     ordering = ["-timestamp"]
    |                ^^^^^^^^^^^^^^
308 |     permission_classes = [permissions.IsAuthenticated]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\optimized_views.py:308:26
    |
306 |     ordering_fields = ["timestamp"]
307 |     ordering = ["-timestamp"]
308 |     permission_classes = [permissions.IsAuthenticated]
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
309 |
310 |     def get_queryset(self):
    |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\apps\rag_assistant\rag_core.py:12:15
   |
10 | from typing import Any, Protocol
11 |
12 | import faiss  # type: ignore
   |               ^^^^^^^^^^^^^^
13 | import numpy as np
14 | from sentence_transformers import SentenceTransformer
   |

PTH123 `open()` should be replaced by `Path.open()`
  --> backend\apps\rag_assistant\rag_core.py:50:14
   |
48 |         # atomic write
49 |         tmp_index = vdir / "index.faiss.tmp"
50 |         with open(tmp_index, "wb") as f:
   |              ^^^^
51 |             f.write(index_bytes)
52 |         tmp_index.replace(index_path)
   |
help: Replace with `Path.open()`

PTH123 `open()` should be replaced by `Path.open()`
  --> backend\apps\rag_assistant\rag_core.py:55:14
   |
54 |         tmp_meta = vdir / "metadata.json.tmp"
55 |         with open(tmp_meta, "w", encoding="utf-8") as f:
   |              ^^^^
56 |             json.dump(metadata, f, ensure_ascii=False, indent=2)
57 |         tmp_meta.replace(meta_path)
   |
help: Replace with `Path.open()`

PTH123 `open()` should be replaced by `Path.open()`
  --> backend\apps\rag_assistant\rag_core.py:68:14
   |
66 |                 f"Index or metadata not found for version {version}"
67 |             )
68 |         with open(index_path, "rb") as f:
   |              ^^^^
69 |             idx_bytes = f.read()
70 |         with open(meta_path, encoding="utf-8") as f:
   |
help: Replace with `Path.open()`

PTH123 `open()` should be replaced by `Path.open()`
  --> backend\apps\rag_assistant\rag_core.py:70:14
   |
68 |         with open(index_path, "rb") as f:
69 |             idx_bytes = f.read()
70 |         with open(meta_path, encoding="utf-8") as f:
   |              ^^^^
71 |             metadata = json.load(f)
72 |         return idx_bytes, metadata
   |
help: Replace with `Path.open()`

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\rag_assistant\rag_service.py:178:9
    |
176 |     def _build_retriever(self) -> Callable[[str], list[dict[str, Any]]]:
177 |         """Build document retriever function."""
178 |         from .rag_core import default_local_orchestrator
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
179 |
180 |         orchestrator = default_local_orchestrator()
    |

PLC0415 `import` should be at the top-level of a file
   --> backend\apps\rag_assistant\rag_service.py:202:9
    |
200 |         """Encode texts to embeddings."""
201 |         emb = self.embedder.embed_documents(texts)
202 |         import numpy as np
    |         ^^^^^^^^^^^^^^^^^^
203 |
204 |         arr = np.array(emb, dtype="float32")
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> backend\apps\rag_assistant\rag_service.py:254:13
    |
252 |             validated_input = QueryInput(query=query, user_id=user_id)
253 |         except Exception as e:
254 |             raise ValidationError(f"Query validation failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |
256 |         chain = self._build_chain()
    |

PTH108 `os.unlink()` should be replaced by `Path.unlink()`
   --> backend\apps\rag_assistant\rag_service.py:318:9
    |
316 |     if len(content_bytes) > MAX_CONTENT_SIZE:
317 |         os.close(fd)
318 |         os.unlink(path)
    |         ^^^^^^^^^
319 |         raise ValueError(f"Content too large. Maximum size is {MAX_CONTENT_SIZE} bytes")
    |
help: Replace with `Path(...).unlink()`

PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   --> backend\apps\rag_assistant\rag_service.py:328:12
    |
326 |             f.write(sanitized_content)
327 |     except Exception:
328 |         if os.path.exists(path):
    |            ^^^^^^^^^^^^^^
329 |             os.unlink(path)
330 |         raise
    |
help: Replace with `Path(...).exists()`

PTH108 `os.unlink()` should be replaced by `Path.unlink()`
   --> backend\apps\rag_assistant\rag_service.py:329:13
    |
327 |     except Exception:
328 |         if os.path.exists(path):
329 |             os.unlink(path)
    |             ^^^^^^^^^
330 |         raise
    |
help: Replace with `Path(...).unlink()`

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:12:18
   |
10 |       class Meta:
11 |           model = Document
12 |           fields = [
   |  __________________^
13 | |             "id",
14 | |             "title",
15 | |             "content",
16 | |             "format",
17 | |             "language",
18 | |             "metadata",
19 | |             "created_at",
20 | |             "updated_at",
21 | |         ]
   | |_________^
22 |           read_only_fields = ["id", "created_at", "updated_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:22:28
   |
20 |             "updated_at",
21 |         ]
22 |         read_only_fields = ["id", "created_at", "updated_at"]
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:32:18
   |
30 |       class Meta:
31 |           model = RagSystem
32 |           fields = [
   |  __________________^
33 | |             "id",
34 | |             "name",
35 | |             "description",
36 | |             "model_name",
37 | |             "index_type",
38 | |             "index_config",
39 | |             "created_at",
40 | |             "updated_at",
41 | |             "document_count",
42 | |             "query_count",
43 | |         ]
   | |_________^
44 |           read_only_fields = ["id", "created_at", "updated_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:44:28
   |
42 |             "query_count",
43 |         ]
44 |         read_only_fields = ["id", "created_at", "updated_at"]
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 |     def get_document_count(self, obj):
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:64:18
   |
62 |       class Meta:
63 |           model = RagQueryLog
64 |           fields = [
   |  __________________^
65 | |             "id",
66 | |             "system",
67 | |             "system_name",
68 | |             "document",
69 | |             "document_title",
70 | |             "query_text",
71 | |             "response_text",
72 | |             "timestamp",
73 | |             "metadata",
74 | |         ]
   | |_________^
75 |           read_only_fields = ["id", "timestamp", "system_name", "document_title"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\serializers.py:75:28
   |
73 |             "metadata",
74 |         ]
75 |         read_only_fields = ["id", "timestamp", "system_name", "document_title"]
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\rag_assistant\signals.py:15:22
   |
14 | @receiver(post_save, sender=Document)
15 | def document_updated(sender, instance, created, **kwargs):
   |                      ^^^^^^
16 |     """Обработка обновления/создания документа."""
17 |     action = "создан" if created else "обновлен"
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\rag_assistant\signals.py:15:51
   |
14 | @receiver(post_save, sender=Document)
15 | def document_updated(sender, instance, created, **kwargs):
   |                                                   ^^^^^^
16 |     """Обработка обновления/создания документа."""
17 |     action = "создан" if created else "обновлен"
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\rag_assistant\signals.py:26:22
   |
25 | @receiver(post_delete, sender=Document)
26 | def document_deleted(sender, instance, **kwargs):
   |                      ^^^^^^
27 |     """Обработка удаления документа."""
28 |     logger.info(f"Документ {instance.title} удален")
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\rag_assistant\signals.py:26:42
   |
25 | @receiver(post_delete, sender=Document)
26 | def document_deleted(sender, instance, **kwargs):
   |                                          ^^^^^^
27 |     """Обработка удаления документа."""
28 |     logger.info(f"Документ {instance.title} удален")
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\rag_assistant\signals.py:36:24
   |
35 | @receiver(post_save, sender=RagSystem)
36 | def rag_system_updated(sender, instance, created, **kwargs):
   |                        ^^^^^^
37 |     """Обновление настроек/состояния RAG системы."""
38 |     logger.info(f"RAG система {'создана' if created else 'обновлена'}: {instance.name}")
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\rag_assistant\signals.py:36:53
   |
35 | @receiver(post_save, sender=RagSystem)
36 | def rag_system_updated(sender, instance, created, **kwargs):
   |                                                     ^^^^^^
37 |     """Обновление настроек/состояния RAG системы."""
38 |     logger.info(f"RAG система {'создана' if created else 'обновлена'}: {instance.name}")
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\rag_assistant\signals.py:43:24
   |
42 | @receiver(post_delete, sender=RagSystem)
43 | def rag_system_deleted(sender, instance, **kwargs):
   |                        ^^^^^^
44 |     """Удаление RAG системы."""
45 |     logger.info(f"RAG система удалена: {instance.name}")
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\rag_assistant\signals.py:43:44
   |
42 | @receiver(post_delete, sender=RagSystem)
43 | def rag_system_deleted(sender, instance, **kwargs):
   |                                            ^^^^^^
44 |     """Удаление RAG системы."""
45 |     logger.info(f"RAG система удалена: {instance.name}")
   |

ARG001 Unused function argument: `sender`
  --> backend\apps\rag_assistant\signals.py:50:22
   |
49 | @receiver(post_save, sender=RagQueryLog)
50 | def rag_query_logged(sender, instance, created, **kwargs):
   |                      ^^^^^^
51 |     """Создание логов запросов — можно обновлять метрики в кэше."""
52 |     if created:
   |

ARG001 Unused function argument: `kwargs`
  --> backend\apps\rag_assistant\signals.py:50:51
   |
49 | @receiver(post_save, sender=RagQueryLog)
50 | def rag_query_logged(sender, instance, created, **kwargs):
   |                                                   ^^^^^^
51 |     """Создание логов запросов — можно обновлять метрики в кэше."""
52 |     if created:
   |

D417 Missing argument description in the docstring for `task_performance_monitor`: `**metadata`
  --> backend\apps\rag_assistant\tasks.py:33:5
   |
32 | @contextmanager
33 | def task_performance_monitor(task_name: str, **metadata):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
34 |     """Краткое описание функции.
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> backend\apps\rag_assistant\tasks.py:172:13
    |
170 |                   f"Retrying document processing {document_id} (attempt {self.request.retries + 1})"
171 |               )
172 | /             raise self.retry(
173 | |                 countdown=RETRY_COUNTDOWN * (self.request.retries + 1), exc=exc
174 | |             )
    | |_____________^
175 |           return {
176 |               "status": "error",
    |

ARG001 Unused function argument: `self`
  --> backend\apps\rag_assistant\tasks_build.py:24:5
   |
22 | )
23 | def rag_build_index_task(
24 |     self,
   |     ^^^^
25 |     documents: list[str],
26 |     version: str | None = None,
   |

DTZ003 `datetime.datetime.utcnow()` used
  --> backend\apps\rag_assistant\tasks_build.py:30:26
   |
28 | ) -> str:
29 |     """Celery task to build and persist local FAISS index for provided documents."""
30 |     version = version or datetime.utcnow().strftime("%Y%m%d%H%M%S")
   |                          ^^^^^^^^^^^^^^^^^
31 |     metadata = metadata or {}
   |
help: Use `datetime.datetime.now(tz=...)` instead

ARG001 Unused function argument: `request`
  --> backend\apps\rag_assistant\urls.py:27:17
   |
25 | # API метрики для мониторинга
26 | @api_view(["GET"])
27 | def api_metrics(request):
   |                 ^^^^^^^
28 |     """Получение метрик API для мониторинга."""
29 |     import time
   |

PLC0415 `import` should be at the top-level of a file
  --> backend\apps\rag_assistant\urls.py:29:5
   |
27 | def api_metrics(request):
28 |     """Получение метрик API для мониторинга."""
29 |     import time
   |     ^^^^^^^^^^^
30 |
31 |     from django.core.cache import cache
   |

PLC0415 `import` should be at the top-level of a file
  --> backend\apps\rag_assistant\urls.py:31:5
   |
29 |     import time
30 |
31 |     from django.core.cache import cache
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |
33 |     current_hour = time.strftime("%Y-%m-%d:%H")
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:43:26
   |
41 | class DocumentViewSet(viewsets.ModelViewSet):
42 |     serializer_class = DocumentSerializer
43 |     permission_classes = [permissions.IsAuthenticated]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |     filter_backends = [filters.SearchFilter, filters.OrderingFilter]
45 |     search_fields = ["title", "content"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:44:23
   |
42 |     serializer_class = DocumentSerializer
43 |     permission_classes = [permissions.IsAuthenticated]
44 |     filter_backends = [filters.SearchFilter, filters.OrderingFilter]
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |     search_fields = ["title", "content"]
46 |     ordering_fields = ["created_at", "language"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:45:21
   |
43 |     permission_classes = [permissions.IsAuthenticated]
44 |     filter_backends = [filters.SearchFilter, filters.OrderingFilter]
45 |     search_fields = ["title", "content"]
   |                     ^^^^^^^^^^^^^^^^^^^^
46 |     ordering_fields = ["created_at", "language"]
47 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:46:23
   |
44 |     filter_backends = [filters.SearchFilter, filters.OrderingFilter]
45 |     search_fields = ["title", "content"]
46 |     ordering_fields = ["created_at", "language"]
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |     ordering = ["-created_at"]
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:47:16
   |
45 |     search_fields = ["title", "content"]
46 |     ordering_fields = ["created_at", "language"]
47 |     ordering = ["-created_at"]
   |                ^^^^^^^^^^^^^^^
48 |
49 |     def get_queryset(self):
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  --> backend\apps\rag_assistant\views.py:71:26
   |
69 | class RagSystemViewSet(viewsets.ModelViewSet):
70 |     serializer_class = RagSystemSerializer
71 |     permission_classes = [permissions.IsAuthenticated]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |
73 |     def get_queryset(self):
   |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:182:26
    |
180 | class RagQueryLogViewSet(viewsets.ReadOnlyModelViewSet):
181 |     serializer_class = RagQueryLogSerializer
182 |     permission_classes = [permissions.IsAuthenticated]
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
183 |     filter_backends = [filters.OrderingFilter, filters.SearchFilter]
184 |     ordering_fields = ["timestamp", "system__name"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:183:23
    |
181 |     serializer_class = RagQueryLogSerializer
182 |     permission_classes = [permissions.IsAuthenticated]
183 |     filter_backends = [filters.OrderingFilter, filters.SearchFilter]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
184 |     ordering_fields = ["timestamp", "system__name"]
185 |     ordering = ["-timestamp"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:184:23
    |
182 |     permission_classes = [permissions.IsAuthenticated]
183 |     filter_backends = [filters.OrderingFilter, filters.SearchFilter]
184 |     ordering_fields = ["timestamp", "system__name"]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
185 |     ordering = ["-timestamp"]
186 |     search_fields = ["query_text", "response_text"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:185:16
    |
183 |     filter_backends = [filters.OrderingFilter, filters.SearchFilter]
184 |     ordering_fields = ["timestamp", "system__name"]
185 |     ordering = ["-timestamp"]
    |                ^^^^^^^^^^^^^^
186 |     search_fields = ["query_text", "response_text"]
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:186:21
    |
184 |     ordering_fields = ["timestamp", "system__name"]
185 |     ordering = ["-timestamp"]
186 |     search_fields = ["query_text", "response_text"]
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
187 |
188 |     def get_queryset(self):
    |

RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   --> backend\apps\rag_assistant\views.py:203:26
    |
202 | class TaskStatusView(APIView):
203 |     permission_classes = [permissions.IsAuthenticated]
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
204 |
205 |     def get(self, request, task_id):
    |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\core\asgi.py:11:52
   |
 9 | # Если Channels и diagnostics.routing доступны — используем их, иначе чистый ASGI
10 | try:
11 |     from channels.auth import AuthMiddlewareStack  # type: ignore
   |                                                    ^^^^^^^^^^^^^^
12 |     from channels.routing import ProtocolTypeRouter, URLRouter  # type: ignore
   |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\core\asgi.py:12:65
   |
10 | try:
11 |     from channels.auth import AuthMiddlewareStack  # type: ignore
12 |     from channels.routing import ProtocolTypeRouter, URLRouter  # type: ignore
   |                                                                 ^^^^^^^^^^^^^^
13 |
14 |     from apps.diagnostics import routing  # type: ignore
   |

PGH003 Use specific rule codes when ignoring type issues
  --> backend\core\asgi.py:14:43
   |
12 |     from channels.routing import ProtocolTypeRouter, URLRouter  # type: ignore
13 |
14 |     from apps.diagnostics import routing  # type: ignore
   |                                           ^^^^^^^^^^^^^^
15 |
16 |     application = ProtocolTypeRouter(
   |

ARG001 Unused function argument: `sender`
  --> backend\core\celery.py:77:5
   |
75 | @task_prerun.connect
76 | def task_prerun_handler(
77 |     sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds
   |     ^^^^^^
78 | ):
79 |     logger.info(f"Task {task.name} started: {task_id}")
   |

ARG001 Unused function argument: `args`
  --> backend\core\celery.py:77:43
   |
75 | @task_prerun.connect
76 | def task_prerun_handler(
77 |     sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds
   |                                           ^^^^
78 | ):
79 |     logger.info(f"Task {task.name} started: {task_id}")
   |

ARG001 Unused function argument: `kwargs`
  --> backend\core\celery.py:77:54
   |
75 | @task_prerun.connect
76 | def task_prerun_handler(
77 |     sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds
   |                                                      ^^^^^^
78 | ):
79 |     logger.info(f"Task {task.name} started: {task_id}")
   |

ARG001 Unused function argument: `kwds`
  --> backend\core\celery.py:77:69
   |
75 | @task_prerun.connect
76 | def task_prerun_handler(
77 |     sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds
   |                                                                     ^^^^
78 | ):
79 |     logger.info(f"Task {task.name} started: {task_id}")
   |

ARG001 Unused function argument: `sender`
  --> backend\core\celery.py:84:5
   |
82 | @task_postrun.connect
83 | def task_postrun_handler(
84 |     sender=None,
   |     ^^^^^^
85 |     task_id=None,
86 |     task=None,
   |

ARG001 Unused function argument: `args`
  --> backend\core\celery.py:87:5
   |
85 |     task_id=None,
86 |     task=None,
87 |     args=None,
   |     ^^^^
88 |     kwargs=None,
89 |     retval=None,
   |

ARG001 Unused function argument: `kwargs`
  --> backend\core\celery.py:88:5
   |
86 |     task=None,
87 |     args=None,
88 |     kwargs=None,
   |     ^^^^^^
89 |     retval=None,
90 |     state=None,
   |

ARG001 Unused function argument: `retval`
  --> backend\core\celery.py:89:5
   |
87 |     args=None,
88 |     kwargs=None,
89 |     retval=None,
   |     ^^^^^^
90 |     state=None,
91 |     **kwds,
   |

ARG001 Unused function argument: `kwds`
  --> backend\core\celery.py:91:7
   |
89 |     retval=None,
90 |     state=None,
91 |     **kwds,
   |       ^^^^
92 | ):
93 |     logger.info(f"Task {task.name} finished: {task_id} (state: {state})")
   |

ARG001 Unused function argument: `traceback`
   --> backend\core\celery.py:98:48
    |
 96 | @task_failure.connect
 97 | def task_failure_handler(
 98 |     sender=None, task_id=None, exception=None, traceback=None, einfo=None, **kwds
    |                                                ^^^^^^^^^
 99 | ):
100 |     logger.error(f"Task {sender.name} failed: {task_id} - {exception}")
    |

ARG001 Unused function argument: `einfo`
   --> backend\core\celery.py:98:64
    |
 96 | @task_failure.connect
 97 | def task_failure_handler(
 98 |     sender=None, task_id=None, exception=None, traceback=None, einfo=None, **kwds
    |                                                                ^^^^^
 99 | ):
100 |     logger.error(f"Task {sender.name} failed: {task_id} - {exception}")
    |

ARG001 Unused function argument: `kwds`
   --> backend\core\celery.py:98:78
    |
 96 | @task_failure.connect
 97 | def task_failure_handler(
 98 |     sender=None, task_id=None, exception=None, traceback=None, einfo=None, **kwds
    |                                                                              ^^^^
 99 | ):
100 |     logger.error(f"Task {sender.name} failed: {task_id} - {exception}")
    |

PLC0415 `import` should be at the top-level of a file
   --> backend\core\health_checks.py:184:9
    |
182 |     """Получение базовых системных метрик."""
183 |     try:
184 |         import psutil
    |         ^^^^^^^^^^^^^
185 |
186 |         return {
    |

D205 1 blank line required between summary line and description
   --> backend\core\health_checks.py:203:5
    |
201 |   @permission_classes([AllowAny])
202 |   def health_check(request):
203 | /     """Комплексный health check endpoint
204 | |     Используется load balancer'ami и мониторингом.
205 | |     """
    | |_______^
206 |       overall_start_time = time.time()
    |
help: Insert single blank line

ARG001 Unused function argument: `request`
   --> backend\core\health_checks.py:290:21
    |
288 | @api_view(["GET"])
289 | @permission_classes([AllowAny])
290 | def readiness_check(request):
    |                     ^^^^^^^
291 |     """Kubernetes readiness probe - быстрая проверка
292 |     Проверяет только критические сервисы.
    |

D205 1 blank line required between summary line and description
   --> backend\core\health_checks.py:291:5
    |
289 |   @permission_classes([AllowAny])
290 |   def readiness_check(request):
291 | /     """Kubernetes readiness probe - быстрая проверка
292 | |     Проверяет только критические сервисы.
293 | |     """
    | |_______^
294 |       db_check = check_database()
295 |       redis_check = check_redis()
    |
help: Insert single blank line

ARG001 Unused function argument: `request`
   --> backend\core\health_checks.py:312:20
    |
310 | @api_view(["GET"])
311 | @permission_classes([AllowAny])
312 | def liveness_check(request):
    |                    ^^^^^^^
313 |     """Kubernetes liveness probe - просто подтверждает, что Django работает."""
314 |     return JsonResponse(
    |

D205 1 blank line required between summary line and description
  --> backend\core\pagination.py:16:5
   |
15 |   class StandardResultsSetPagination(PageNumberPagination):
16 | /     """Стандартная пагинация для большинства API endpoints
17 | |     Оптимизирована для производительности.
18 | |     """
   | |_______^
19 |
20 |       page_size = 20
   |
help: Insert single blank line

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> backend\core\pagination.py:63:13
   |
61 |                 page_number=page_number, message=str(exc)
62 |             )
63 |             raise NotFound(msg)
   |             ^^^^^^^^^^^^^^^^^^^
64 |
65 |         if paginator.num_pages > 1 and self.template is not None:
   |

D205 1 blank line required between summary line and description
   --> backend\core\pagination.py:148:5
    |
147 |   class NoPagination(PageNumberPagination):
148 | /     """Отключение пагинации для малых списков
149 | |     ОСТОРОЖНО: используйте только для гарантированно малых результатов!
150 | |     """
    | |_______^
151 |
152 |       page_size = None
    |
help: Insert single blank line

D205 1 blank line required between summary line and description
   --> backend\core\pagination.py:156:5
    |
155 |   class CursorPaginationOptimized(PageNumberPagination):
156 | /     """Оптимизированная cursor-based пагинация для больших данных
157 | |     Лучшая производительность для очень больших таблиц.
158 | |     """
    | |_______^
159 |
160 |       page_size = 25
    |
help: Insert single blank line

RUF003 Comment contains ambiguous `б` (CYRILLIC SMALL LETTER BE). Did you mean `6` (DIGIT SIX)?
   --> backend\core\settings.py:279:8
    |
277 |         },
278 |     },
279 |     # Сбор статистики по hypertables каждый час
    |        ^
280 |     "collect-hypertable-stats": {
281 |         "task": "apps.diagnostics.timescale_tasks.get_hypertable_stats",
    |

ARG001 Unused function argument: `request`
  --> backend\core\urls.py:47:20
   |
45 |     from django.http import JsonResponse
46 |
47 |     def handler404(request, exception):
   |                    ^^^^^^^
48 |         return JsonResponse(
49 |             {
   |

ARG001 Unused function argument: `exception`
  --> backend\core\urls.py:47:29
   |
45 |     from django.http import JsonResponse
46 |
47 |     def handler404(request, exception):
   |                             ^^^^^^^^^
48 |         return JsonResponse(
49 |             {
   |

ARG001 Unused function argument: `request`
  --> backend\core\urls.py:57:20
   |
55 |         )
56 |
57 |     def handler500(request):
   |                    ^^^^^^^
58 |         return JsonResponse(
59 |             {
   |

PLC0415 `import` should be at the top-level of a file
  --> backend\manage.py:11:9
   |
 9 |     os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.core.settings")
10 |     try:
11 |         from django.core.management import execute_from_command_line
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |     except ImportError as exc:
13 |         raise ImportError(
   |

PTH120 `os.path.dirname()` should be replaced by `Path.parent`
  --> backend\test_rag.py:17:12
   |
16 | # Инициализация Django окружения (для доступа к settings, если нужно)
17 | BASE_DIR = os.path.dirname(__file__)
   |            ^^^^^^^^^^^^^^^
18 | sys.path.insert(0, BASE_DIR)
19 | os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
   |
help: Replace with `Path(...).parent`

PLC0415 `import` should be at the top-level of a file
  --> backend\tests\test_serializers.py:13:9
   |
11 | class TestDiagnosticReportSerializer:
12 |     def test_create_report_minimal(self, django_user_model):
13 |         from apps.diagnostics.models import DiagnosticReport, HydraulicSystem
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 |         owner = django_user_model.objects.create(email="u@example.com", username="u")
   |

Found 219 errors.
