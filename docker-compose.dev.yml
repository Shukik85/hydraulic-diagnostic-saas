services:
  # База данных с TimescaleDB
  db:
    image: timescale/timescaledb:2.15.0-pg16  # Актуальная версия на октябрь 2025
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: hydraulic_diagnostic
      # TimescaleDB специфичные настройки
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/init-timescale.sql:/docker-entrypoint-initdb.d/001-init-timescale.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d hydraulic_diagnostic -c 'SELECT 1 FROM timescaledb_information.hypertables LIMIT 1;' || echo 'TimescaleDB not ready'"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 30s

  # Redis для Celery и кеширования
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DJANGO_SETTINGS_MODULE: core.settings
      DATABASE_URL: postgresql://postgres:password123@db:5432/hydraulic_diagnostic
      REDIS_URL: redis://redis:6379/0
      AI_REDIS_URL: redis://redis:6379/1
      SECRET_KEY: dev-secret-key
      DEBUG: "True"
      ALLOWED_HOSTS: localhost,127.0.0.1
      # TimescaleDB специфичные настройки
      TIMESCALE_ENABLED: "True"
      TIMESCALE_CHUNK_TIME_INTERVAL: "7 days"
    volumes:
      - ./backend:/app/backend
      - ./backend/logs:/app/backend/logs
      - ./data:/app/data  # Для RAG индексов
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery worker для background задач
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "-lc", ". /opt/venv/bin/activate && celery -A core worker -l info"]
    working_dir: /app/backend
    environment:
      DJANGO_SETTINGS_MODULE: core.settings
      DATABASE_URL: postgresql://postgres:password123@db:5432/hydraulic_diagnostic
      REDIS_URL: redis://redis:6379/0
      AI_REDIS_URL: redis://redis:6379/1
      SECRET_KEY: dev-secret-key
      DEBUG: "True"
      TIMESCALE_ENABLED: "True"
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery beat для периодических задач (TimescaleDB управление)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "-lc", ". /opt/venv/bin/activate && celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"]
    working_dir: /app/backend
    environment:
      DJANGO_SETTINGS_MODULE: core.settings
      DATABASE_URL: postgresql://postgres:password123@db:5432/hydraulic_diagnostic
      REDIS_URL: redis://redis:6379/0
      AI_REDIS_URL: redis://redis:6379/1
      SECRET_KEY: dev-secret-key
      DEBUG: "True"
      TIMESCALE_ENABLED: "True"
    volumes:
      - ./backend:/app/backend
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Flower для мониторинга Celery (опционально)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["bash", "-lc", ". /opt/venv/bin/activate && celery -A core flower"]
    working_dir: /app/backend
    environment:
      DJANGO_SETTINGS_MODULE: core.settings
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    profiles:
      - monitoring  # Запуск через: docker-compose --profile monitoring up

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local
